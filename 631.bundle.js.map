{"version":3,"file":"631.bundle.js","mappings":"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","sources":["webpack://horcrux/webpack/runtime/async module","webpack://horcrux/../src/utils.ts","webpack://horcrux/../src/network-client.ts","webpack://horcrux/../src/function-key-provider.ts","webpack://horcrux/../src/program-manager.ts","webpack://horcrux/../src/index.ts","webpack://horcrux/../src/worker.ts","webpack://horcrux/wasm.js","webpack://horcrux/../js/index.js","webpack://horcrux/./node_modules/.pnpm/comlink@4.4.1/node_modules/comlink/dist/esm/comlink.mjs","webpack://horcrux/webpack/bootstrap","webpack://horcrux/webpack/runtime/define property getters","webpack://horcrux/webpack/runtime/get javascript chunk filename","webpack://horcrux/webpack/runtime/global","webpack://horcrux/webpack/runtime/hasOwnProperty shorthand","webpack://horcrux/webpack/runtime/publicPath","webpack://horcrux/webpack/runtime/importScripts chunk loading","webpack://horcrux/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","export async function get(url: URL | string) {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./index\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  account: Account | undefined;\n\n  constructor(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/testnet3\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url);\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext> | Error> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        if (!(blocks instanceof Error)) {\n          // Iterate through blocks to find unspent records\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const transactions = block.transactions;\n            if (!(typeof transactions === \"undefined\")) {\n              for (let j = 0; j < transactions.length; j++) {\n                const confirmedTransaction = transactions[j];\n                // Search for unspent records in execute transactions of credits.aleo\n                if (confirmedTransaction.type == \"execute\") {\n                  const transaction = confirmedTransaction.transaction;\n                  if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                    for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                      const transition = transaction.execution.transitions[k];\n                      // Only search for unspent records in credits.aleo (for now)\n                      if (transition.program !== \"credits.aleo\") {\n                        continue;\n                      }\n                      if (!(typeof transition.outputs == \"undefined\")) {\n                        for (let l = 0; l < transition.outputs.length; l++) {\n                          const output = transition.outputs[l];\n                          if (output.type === \"record\") {\n                            try {\n                              // Create a wasm record ciphertext object from the found output\n                              const record = RecordCiphertext.fromString(output.value);\n                              // Determine if the record is owned by the specified view key\n                              if (record.isOwner(viewKey)) {\n                                // Decrypt the record and get the serial number\n                                const recordPlaintext = record.decrypt(viewKey);\n\n                                // If the record has already been found, skip it\n                                const nonce = recordPlaintext.nonce();\n                                if (nonces.includes(nonce)) {\n                                  continue;\n                                }\n\n                                // Otherwise record the nonce that has been found\n                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                                // Attempt to see if the serial number is spent\n                                try {\n                                  await this.getTransitionId(serialNumber);\n                                } catch (error) {\n                                  // If it's not found, add it to the list of unspent records\n                                  if (!amounts) {\n                                    records.push(recordPlaintext);\n                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                    if (typeof maxMicrocredits === \"number\") {\n                                      totalRecordValue += recordPlaintext.microcredits();\n                                      // Exit if the search has found the amount specified\n                                      if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                        return records;\n                                      }\n                                    }\n                                  }\n                                  // If the user specified a list of amounts, check if the search has found them\n                                  if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                    let amounts_found = 0;\n                                    if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                        amounts_found += 1;\n                                        records.push(recordPlaintext);\n                                        // If the user specified a maximum number of microcredits, check if the search has found enough\n                                        if (typeof maxMicrocredits === \"number\") {\n                                          totalRecordValue += recordPlaintext.microcredits();\n                                          // Exit if the search has found the amount specified\n                                          if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                            return records;\n                                          }\n                                        }\n                                        if (records.length >= amounts.length) {\n                                          return records;\n                                        }\n                                    }\n                                  }\n                                }\n                              }\n                            } catch (error) {\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block | Error> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block> | Error> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = \"Error fetching blocks between \" + start + \" and \" + end + \".\"\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string | Error> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel | Error}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel | Error> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block | Error> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object | Error> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number | Error> {\n    try {\n      return await this.fetchData<number>(\"/latest/height\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program | Error>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program | Error> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports | Error> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error) {\n      throw logAndThrow(\"Error fetching program imports: \" + error)\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[] | Error> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error) {\n      throw new Error(\"Error fetching program imports with error: \" + error);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string> | Error> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel | Error> {\n    try {\n      return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel> | Error> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string | Error> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string | Error> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      try {\n        return await response.json();\n\n      } catch (error) {\n        throw new Error(`Error posting transaction. Aleo network response: ${(error as Error).message}`);\n      }\n    } catch (error) {\n      throw new Error(`Error posting transaction: No response received: ${(error as Error).message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, ProgramImports }\n","import { ProvingKey, VerifyingKey, CREDITS_PROGRAM_KEYS, KEY_STORE, PRIVATE_TRANSFER, PRIVATE_TO_PUBLIC_TRANSFER, PUBLIC_TRANSFER, PUBLIC_TO_PRIVATE_TRANSFER} from \"./index\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair | Error> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair | Error>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n}\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n            const response = await get(url);\n            const data = await response.arrayBuffer();\n            return new Uint8Array(data);\n        } catch (error) {\n            throw new Error(\"Error fetching data.\" + error);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair | Error {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            return new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * const AleoProviderParams = new AleoProviderParams(\"https://testnet3.parameters.aleo.org/transfer_private.\");\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair | Error> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\"https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2\", \"https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762\");\n     */\n    async fetchKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair | Error> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error) {\n            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair | Error> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair | Error> {\n        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUrl: string): Promise<VerifyingKey | Error> {\n        switch (verifierUrl) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.bond_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.inclusion.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.join.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.split.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey);\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey);\n            default:\n                return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUrl));\n        }\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./index\";\nimport {Execution} from \"@aleohq/wasm/dist/crates/aleo_wasm\";\n\n// TODO put this somewhere where it makes more sense\ninterface ExecutionParams {\n    programName?: string;\n    functionName?: string;\n    fee?: number;\n    privateFee?: boolean;\n    recordSearchParams?: any;\n    keySearchParams?: any;\n    feeRecord?: any;\n    provingKey?: any;\n    verifyingKey?: any;\n    privateKey?: any;\n}\ninterface OfflineParams {\n    offlineQuery?: OfflineQuery\n}\ninterface Options {\n    offlineParams?: OfflineParams;\n    executionParams?: ExecutionParams;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        if (!host) {\n            this.host = \"https://api.explorer.aleo.org/v1\";\n            this.networkClient = new AleoNetworkClient(this.host);\n        } else {\n            this.host = host;\n            this.networkClient = new AleoNetworkClient(host);\n        }\n\n        if (!keyProvider) {\n            this.keyProvider = new AleoKeyProvider();\n        } else {\n            this.keyProvider = keyProvider;\n        }\n\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.aleo.org/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string | Error> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e) {\n            throw logAndThrow(`Error validating program: ${e}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build an execution transaction for later submission to the Aleo network.\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const transaction = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        // Ensure the function exists on the network\n        let program;\n        try {\n            program = <string>(await this.networkClient.getProgram(programName));\n        } catch (e) {\n            throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(programName);\n        } catch (e) {\n            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Execute an Aleo program on the Aleo network\n     *\n     * @param {string} programName Program name containing the function to be executed\n     * @param {string} functionName Function name to execute\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {string[]} inputs Inputs to the function\n     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for\n     * the execution transaction\n     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys\n     * for the function\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const keySearchParams = { \"cacheKey\": \"hello_hello:hello\" };\n     * const tx_id = await programManager.execute(programName, \"hello_hello\", 0.020, [\"5u32\", \"5u32\"], undefined, undefined, undefined, keySearchParams);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async execute(\n        programName: string,\n        functionName: string,\n        fee: number,\n        privateFee: boolean,\n        inputs: string[],\n        recordSearchParams?: RecordSearchParams,\n        keySearchParams?: KeySearchParams,\n        feeRecord?: string | RecordPlaintext,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        const tx = <Transaction>await this.buildExecutionTransaction(programName, functionName, fee, privateFee, inputs, recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * import { Account, Program } from '@aleohq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.executeOffline(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e) {\n            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string | Error> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e) {\n            throw logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair | Error>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair | Error> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<VerifyingKey>keyPair.provingKey(), <ProvingKey>keyPair.verifyingKey()];\n        } catch (e) {\n            throw logAndThrow(`Could not synthesize keys - error ${e}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e) {\n            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e) {\n            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction | Error> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string | Error>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://vm.aleo.org/api\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string | Error> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a staking committee for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async buildBondPublicTransaction(address: string, amount: number, options: Options = {}) {\n        amount = Math.trunc(amount*1000000);\n\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = executionParams?.fee || 0.86,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                    cacheKey: \"credits.aleo/bond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.buildExecutionTransaction(programName, functionName, fee, privateFee, [address, `${amount.toString()}u64`], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Bond credits to a staking committee\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 2000000);\n     *\n     * @returns string\n     * @param {string} address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(address: string, amount: number, options: Options = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond a specified amount of staked credits to be used later\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.unbondPublic(10);\n     *\n     * @returns string\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {Options} options Options for the execution\n     */\n    async buildUnbondPublicTransaction(amount: number, options: Options = {}): Promise<Transaction | Error> {\n        amount = Math.trunc(amount*1000000);\n\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = executionParams?.fee || 1.3,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                    cacheKey: \"credits.aleo/unbond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return this.buildExecutionTransaction(programName, functionName, fee, privateFee, [`${amount.toString()}u64`], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits to be used later\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.unbondPublic(10);\n     *\n     * @returns string\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {Options} options Options for the execution\n     */\n    async unbondPublic(amount: number, options: Options = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to Claim unbonded credits for later submission. If credits have been unbonded by the account\n     * executing this function, this method will claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic();\n     *\n     * @returns string\n     * @param {Options} options\n     */\n    async buildClaimUnbondPublicTransaction(options: Options = {}): Promise<Transaction | Error> {\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = executionParams?.fee || 2,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                    cacheKey: \"credits.aleo/claim_unbond_public\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.buildExecutionTransaction(programName, functionName, fee, privateFee, [], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.aleo.org/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic();\n     *\n     * @returns string\n     * @param {Options} options\n     */\n    async claimUnbondPublic(options: Options = {}): Promise<string | Error> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Set Validator State\n     * @returns string\n     * @param {boolean} validator_state\n     * @param options\n     */\n    async setValidatorState(validator_state: boolean, options: Options = {}) {\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                    cacheKey: \"credits.aleo/set_validator_state\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.execute(programName, functionName, fee, privateFee, [validator_state.toString()], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n    /**\n     * Unbond Delegator As Validator\n     * @returns string\n     * @param {string} address\n     * @param options\n     */\n    async unbondDelegatorAsValidator(address:string, options: Options = {}) {\n        const {\n            offlineParams = {},\n            executionParams = {}\n        } = options || {};\n\n        let {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_delegator_as_validator\",\n            fee = 1,\n            privateFee = false,\n            recordSearchParams,\n            keySearchParams,\n            feeRecord,\n            provingKey,\n            verifyingKey,\n            privateKey\n        } = executionParams;\n\n        if (keySearchParams === undefined) {\n            keySearchParams = new AleoKeyProviderParams(\n                {\n                    proverUri: CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.prover,\n                    verifierUri: CREDITS_PROGRAM_KEYS.unbond_delegator_as_validator.verifier,\n                    cacheKey: \"credits.aleo/unbond_delegator_as_validator\"\n                });\n        }\n\n        const {\n            offlineQuery,\n        } = offlineParams;\n\n        return await this.execute(programName, functionName, fee, privateFee, [address], recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey, offlineQuery);\n    }\n\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <Execution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program | Error} The program object\n     */\n    createProgramFromSource(program: string): Program | Error {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext | Error> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e) {\n                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string | Error {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","const KEY_STORE = \"https://testnet3.parameters.aleo.org/\";\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: {\n        prover: KEY_STORE + \"bond_public.prover.ff75d2e\",\n        verifier: \"bond_public.verifier.d3cfe73\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqzl9uqqqqqqqqq9stcqqqqqqqqqxa4sqqqqqqqqqyuwqqqqqqqqqpdyqqqqqqqqqqqvqqqqqqqqqqqx9lfqwmck43wt597p8xn68dh8l9setmmtk0ev35tgzkzm3j0j4tgu2s9kdu5w9m7g4dkglj28wayp2njn9qkuygpmcf9j7qc32aafepe5d9tdqyrq9ju2e8mlhkq8tucdh30rxysfl9h7d9jusmjhjcwgpuh0hhlspvtuv98n453apnqceupv2tc26wwx9mjl7m8j0urgax42xzrc9sltd62pfjgnw7vxh36vqxzajv5tyer6hpld0fr75jah48gaqpnexurtrag0azpcpep4lyxeyt4jytug2u7urfrp8rjh5wlkqqz7htzt8fdnthyngd5eqqfc6q0d6zw8lwlyr3hgqkjmkshmw5trm2tqg7euqav6r2vssqm9ut7ecjqq2fqs3k8mjp769qv5r2q52hcre66ymggtva7ty32lqpnrgrhgsc78g7qc00y5z6m626umkhqmz8sp0s4jz6qrvc6s47sycncq6ryltq2tmfxkz22e0g79cy4dzcnu5rwjkl4x3f27gavm7gug50tqnkwqrrjd430j9n8rrg78lpqfye8drxcnd2lxdry9nza8vfg4v3jmnmcdw55pu4kahfrawe4guvaqx26hqxhesqzxe343fjyz7vajn6prhg0jwzjtjh75v5wtp3h2knnvtshzae2uxel720fxg0vyfvnncsnxdqrqjc8aw8avq9kucsvauju4d0ke989s7v55ha0nh3dvdd9rct56pvg87txnhre3qvwmw6acf6t4x5q2al4gwwpqjhsezx6zmth0qeene0v3prwuh8a56r7qafhnyd98f8lx7xv4v48q7q7fd2373ag4fz5pmslx7v5hmpreqrdyj5h6we0kd24wk80f8sq44exsed3egstrn409cwzs9ph8563nh7vy6pcjnqxqrkzqvsa860spwjjf78hyful7zk2l3e9s4u4l0hqdyt547qxz3xamy5gkmd\",\n    },\n    claim_unbond_public: {\n        prover: KEY_STORE + \"claim_unbond_public.prover.4c492b0\",\n        verifier: \"claim_unbond_public.verifier.3793e4c\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8lycqqqqqqqqq02fsqqqqqqqqq849sqqqqqqqqpe26qqqqqqqqqzfnwqqqqqqqqqqvqqqqqqqqqqqgyhv4exh3e2g4f3ek5hymm8ah5h5hdp8v0j52dsksskad9wsryetk3qcr5um8t4nnpnqvhlsk5vcpea7w8uca2pum92jh2has0ag2gq24up0qr7p5z34jzrmtjx2583vkffyywmnatjs5t05x4yyc534cpsutfr4jaxqc9dlmxfw7a5tl4nl9q9qvweaver0q04pfl65w5wuyaadlzjhkkrrjaskg86tmkqy8s8vug7dyjnpe55y5ju8eag63p49ufdyguxdw2fwt46nwer74m3xmv9z6jhgslfwjre4fwctkppytsqrwmlf5szn9ckj2r86sa7azq0ly9atfjeee3f2f3n8s3rkrzezpqmcrt5lv3xlmymgspyj2vn7ytgqj97aula7tuxfrcsk787shhdjyxdvepspp7f4jaxuunzeuw58kdwupfdn8wj89grv5pk5qmxap9xgqxwwf08k98xnkdrp3n4jme0ur5604xp2q9fxlc0aw47vwfcurtsp9nv0rajv4lmune4mx8h39jvkcpv4fnngk3me5d6vds4m5xe6vuqlz55gnzue7fyyt0vzuwsg8f2ztepupry8g32ee48gmj2lldg96qp5xxcjxetgrq8muj4n7w3kv56spy3zhw8xr7ngd4u6l20pk4yvlsamu3y7nr4na246qqnjszlz6jq0922q8dsefkf7cpz8tc0fv4t2uk6y7r8wy5vtmah2y80al3vmc3kma70p4utwf40mc7x33y66zsgq94e09r5mmj5us835tz95w5r8eqz335lz8rac72d4jzxg0c40nmskvl236nz9dysg6uxp80yugx7cqckstk9f79ha0s6k8nftlmqds3za97648k2usw7xnyf9echpy3lsdsaatleyt5w5z2qgqyrxlaxsgq3tytq4qhjrlfz2dz7kuy7dyr0u4q5p78ux8ylh8tcsau46jevm944a798\",\n    },\n    fee_private: {\n        prover: KEY_STORE + \"fee_private.prover.43fab98\",\n        verifier: \"fee_private.verifier.f3dfefc\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8rjvqqqqqqqqq00ycqqqqqqqqqusvszqqqqqqqpnf6qyqqqqqqqqcd6qqqqqqqqqqvqqqqqqqqqqq0plfjy36deglp5xr0lk3rccawpqgztrnjusxnlkc8hz6879me8ty8y7rxzc3qqafadrmvz0v2aluqjwezzwkmj3q9vmr0xgk3arehjhppu7scsw6h4nj08z7fswhyq739ypuh67ff0f0sg8787aq4w80gqrn8e5kduw8h002rkjrw907zqxawqu7qmumx5zayg7k55rdzn05eg5sl8swr7fveuhud3gmf9xjsqzd9x9az5ls4s8cwjgc5lmvkhphy67q0g7qwzee7hyavg335j25mllnywrtjcwfejt55qxag7wvggqtmtc3al0gy6q83hql4wagk37e200592az7n525s80c4xwr92jr8dt40t3fyjxzszrc9umk95psswq82kkg25sh25s3mw5z3xt9qy2ftm8ec4a8l8rwfuxfujjrxxnhmrqs4wsunec3ukd4mur4fkj8enqqqv9n37e5fyag7e33rxsyp63u5rfs8hn26slsmdaqzvp2flcz506r0hqncdtt07nhulltlh5wyq4gpxsln5td2v0treu7t8wanhq6yv8hswxla7cf3w8nv4p233gz0ry9n7sj2uduredwtykw2ec3fs8fqrjkz8agg2xj8t9wden6spzdfcl7jlw4rgzv4hjqvh4cw40yhh8udv5g6vd0jhhfmqevezq0zs4x2q2m7u0hq9mkvulj950t9a5tcm6suycdlaky8t568jevkn3tf9uu5laevjumvahk4cxjxam85kq0l5qrycnmdzgvm7hr8cvl8a7qzcmjkwh48krtxtduhcfn7hvt752slm0nvth0yf35jugxg7ah2kw5emcq4mk962eypxyvwahf4k5ql8376l5za4zvv2p7jzgkjjs4lc60nv3czmdmmc0qn5mwnlnaxmwazs3qzfea0z0sn3nflp8v2lwlczljxre975fnvw3vfyrrjze4wuxtkjg7j37fph\",\n    },\n    fee_public: {\n        prover: KEY_STORE + \"fee_public.prover.634f153\",\n        verifier: \"fee_public.verifier.09eeb4f\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrcxyqqqqqqqqq8yvgqqqqqqqqqndesqqqqqqqqpg56qqqqqqqqqqhyyqqqqqqqqqqvqqqqqqqqqqq9a3p0z8q2qzsgq6lsd3zeh3tvezv0d2wg9tykutk9s7dat8uyamgxv54vv5le5slhta92cs08905qy0mgfdx0r7hzc7ec4qn8wmkx2cvtrwggad5h898kkp20eheukemkhj6g37flhpmxq9hpk9q2kfcsr58ufzupqpgfthzxsrn0554ttqckrgfwjfnvpfqhy4evahxkzahkf85pqt0es3j5jc2kzpkcu4ausrm4k53evjtuy3tzc3jgwl7y5t79j0ddhprs6ls9x0qpvqggvkffjg0psvjrmf2rsw5xrdnmqxlx5qru82dsavaka5kfsvxgyrzdf4tzceghyeqpk55308pkc0sg63sgwt8fywksccjdkkrqkh00kgraeuq97zsydp9z6pagtqmaply94dacmk7qkgg5jt36exjxcjdckjgswc5agg9xd4lqmpxxmtur7d7ecvvpg5rg4mzlf65hlpeynczqwdgrdekx7m3n4ljumgezxyzq7h9wmnrqfawayl5gns8gv2jaucwc9qmcq7pj6kvddw8dgpdf0rh66a6erzj9fmupu8ulc2x64092k5sfdm6rlaktdv8fscn8wlct0p9xahl2qqnxsw3tfzms5xplll4xamrlhtjm2xfsqmx62er2lmmzn6wk8788hcpg7uetlrufwlvmapeh00h9aqql6ggsknvwt45wjmfkky7z5ukly3dpjqvqt3yl839d8flcx6kpf5vqvdm57kqdwjazcmfn4ae87yqg08dlw805prfrfjvlyff3kq09z2yxc0pcaqalj7r4e6lygruk2ezpkfjlslyjtek6rtgvfwavqa5pmp6jgmr8xzu5dk0lcmfgm0plw8jkwt60pz2scpuh78k7f4dlfp7grjpn3xtdphhsn0k8rpfwqq3qr6huef2asc990ragxknla7kdl76xr2g2vl8pnql3f58wgcptked7rgeah8\",\n    },\n    inclusion: {\n        prover: KEY_STORE + \"inclusion.prover.cd85cc5\",\n        verifier: \"inclusion.verifier.e6f3add\",\n        verifyingKey:\n            \"verifier1qyyqqqqqqqqqqqzq7qqsqqqqqqq0huqpqqqqqqqqjvksgqqqqqqqqnypqgqqqqqqqzk8sqcqqqqqqqqvqqqqqqqqqqqxsh33gk03qelqrvy0g5m2km5vfhs6flwsutadvdl3nd82a3xqunx8pgaccs2yh654tpnanywulgvpvfxuma59ufttju8mvnpmuhg720p6fawv4ynhe75vfhn3te00saqpd5kpgxw59gf4r3ng3z0hr49gpwlwgkac7zlqk7cne5xh33m96qep9xeu2nf68dye57yqrnqgtaa2vk3ldcpurjn3s4pavzde8cehsrqn57qm2ewew3t4g6css5qzgfywdkkrx0rmz5u68cxvrwaksjd4s2exerl3u7cae58tc383yzd5tqxk66xqldl3ch8ymq73jhufwfcp4r8vcynmjenzt355a3qnejfndw7v5sn9a63wrd86rczgrp8wsuqsth7346q3qgaddsj6ln92233jjvke2krn809qvt8ev940hfclr5etza54055m8upn5jhg224v27cqamjy5lv3qm5nyc9asy0tqz0xsgmkuyp75t2qgv3h9s4av3u5tpmf8qkf7k7gp8rjlf67uncphscspvlmku59mgn4cqlxqqz3qdsyycs2my3emuyj9vnzt0464rfgnnmxwnw4kkqe50f764fjauj73kqcsxzn5mecv507xnetxvhfkt79r6hfvf6nzl735xtfp4r7uxlns3dazwj9mgl4fayzv0nqprh80ydqtq9tl6ffcmav2mlsky8tdrunewu3z8a2qg5wfhxz4j0xsqzfsr50ts63g0wysvnkt4rd6equa0r6fsqhrsjft0qy4jnstawrmnj28llqfgemj868y6aaw5rjftgp5vezg7r2c4q5zeupt4gghwand0jeyv5qfnxtnzh7wflxh7tdd0q6zh2fy635xhmllux8hk946t3kzenmc0355mz309gfachp2verz2qaepxsrj63nr54uga9eh2xcgp85v90dellhsvyx73m2w2qyed52svs62ysg7e3ag\",\n    },\n    join: {\n        prover: KEY_STORE + \"join.prover.1a76fe8\",\n        verifier: \"join.verifier.4f1701b\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqz2cvqqqqqqqqqx0scqqqqqqqqqc42qzqqqqqqqpvmfqyqqqqqqqquzwqgqqqqqqqqvqqqqqqqqqqqpz6knqjfm77py0mpx68rmc6yavzrjpn3vdn5rmhum6u47fxt3j7auv5mk8epjx0hsa7nfm4llzwqqj84x9cnerm5gach0nzfy0jsvfrylvld5ffe8g63nhw5qng68rs6yrlzrc5229ezc8j4n4y0f2hrqqmdphh3mpglur7evq52n6mx9nls064fpn8wr3vqz75vextjhjmpvcrgs8har5txjnh9tj8lmlusns8nklkw8dh8nc8sv0llh4cgw95l3m7mwugu5nfrrlmyccnmrues4wl0hdfwsq8wvn60y2hl036g3aqzh5cn6n2366fy4hawjn22mj86w2w7twq80pdrea6svl7uq5zyh9nz4qgd72tql95n2xx0zh3wcjyqca5wzv4276exszaunpjduuvjmture49av40ve03akc9qw709wuf9a8hhpwlwwz8acf2z5ngk2d95qzfqhkmllqx4lnupyevkn8zthgu54x55t4cqm7uvmmnu3vtvkmsr4tldemm26shwk8ux27v6lmxkqppuesjj5d3m7x5rsg7yn8cg6hkat6fy8u8zj3n0z26ehqvmq8x2fadtw5jt6pxxfp3cm40ak7x9yqym5qrwjzpr7xwr4t6pjn5ca9g02hnuyvxd9jqpv70a7w05mqatnyzhnfl462xmsehgcwczjkrzz2qxk3wa0elrnvnh9qlz3cc2g8xyag9yrds0jepsvskl55zqtntp6qvkj9nkmlercd95j8g9xdgxv0sq0y6gq32ng5r9zcs4wt3vryhldxtr9epyz5vnnx4mf2lhv4r56mftaugjemxezpjcv9enr259tf7qq66a7ngsc3y0a5jlm8jg2rnd9c38ny2m5egl7ssx62zcscztkmjqpkvta2za4ym5jkatgzd2zspfcrc7gesjxjgcvhsua3jpyzpdan6mestyqsx5eatkmzv9zmpwkur3c34sjzc\",\n    },\n    split: {\n        prover: KEY_STORE + \"split.prover.e6d12b9\",\n        verifier: \"split.verifier.2f9733d\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqpehuqqqqqqqqq930cqqqqqqqqq295qzqqqqqqqqyyyqyqqqqqqqzjjvqgqqqqqqqqvqqqqqqqqqqqyjhdhawnd33kv88ehql385slkd7lyr46jnf7yathmnxnr7at2j6u4nfkkvryujwt8rvhdfpuw94qq8e7sp33sjtyz53q89k85ttcg2cvadvuadeuq5xn4hgkmvm3qj93er0t2pjpd2p4kd3zy2gqmqd5qpfzdk973253ufzafqwd9879c7wpdv500a4xhetxkareamyl2qqzdd5hxl94vnmrkluzx0te32rkusqs20xswldqdgekfh6p25yxjhls20k59lsfn9az8jak9lr6r745ujsq0jq9fvugqyqchuca8xq6stq0svvu7e4xguc84t3s72erg4ve2z3nsr3jqv6jtala9j3xf5msksupprwwxkwwl58pv2hmr4g5h4xqym3nj6ax7ujx70np7egc4nw0w3j02m34eq00gssjq0pf9xfltxtef29crye3sul45kkawnrl6uzvquszlgltwtgx2xjlehgh0xpdm68dyjev9qxsleetpc33mns5jakrmqqryk8qgmnc56dzgcwm99eccq6c93576s946jztmuvgp8522y00jpck54wlcg3me44sk8usehsnjgm85zmypjsf7nlp06na927dtqp7u45jnd3em0n9h0wgtgvwh7lyhq4guwdfxws8mswwzfr5fjdtv0smjeq3r58v03amrhgr2ex4h7q8wapp8h5ug8vh0fxkt6yp3l2mas3l0jmmpedy9vx4lnxmjwn8t4wxyrdnnr54jxmp0wyu3sf6wwkqa6r2g2u9qu5km92fjnckme07mrxghuxh9ktpj9cvaf08sccdtdwjsnkyt9qu2x5ft27tkrskudrqpyr63x640xlk9wqpmy3edx58wxwzesmx22v62y6lshjv3wur83jlmwm74qqpd34ewmrk7eg0jfp7cretx5jwfv5c904v9qazfyluh5fpdczgx9fluayuukfwnqjq8tdwx3shuy5\",\n    },\n    transfer_private: {\n        prover: KEY_STORE + \"transfer_private.prover.2b487c0\",\n        verifier: \"transfer_private.verifier.3a3cbba\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqqvccqqqqqqqqqz43sqqqqqqqqq7jqqzqqqqqqqpj4vqyqqqqqqqq0zuqgqqqqqqqqvqqqqqqqqqqqyvnz4pl9kjr0ks3dtkz67gw8tyqzs3sxskt8xg6keqrrqk9nj3e39kg65lzz5sd5tug2ecrpmfg5peseqmv709nry8up96qwsuvpp8684njpe4qunfhf7ywc0a7lck9rdlfcred8krn60lgztx4wlrlmspnnkwe9gmqk07tt5lj3wxcpucpshz7ec6w5mqvspprmu88lr9tr9e7a9fqdye0jdajq46pt35hdjsruamruf6v73fu68hv5fcsndmfq3c65yjrmljfg3343vj8cca2js2gumrks9eepm3d7g02jw0se9eqpaj86kpscxu4vuvw7jedgt2c0l4fk5zqwdu3vfhrazjwedl5d0n9w75ky0924qjjzg3c04dw7p8uqxqnuph6d3d935zqavxtte336jmnpk0hkjn80cejqfljl7w6jtnl3tedhtdk4cx207c7lud9xagzcp760x47h3hrw68syru4rnr3zgy99wcpnglpjvndzrjpc3z8c53xyqx0jh8cnt6gn92fgqu8a5huespxgnckqgttq8aa7xngxt9f5lpq2zgakfhtfvhlcy66k3depln3x67ck2m9t0fvnetjygj6h2er2fqqwcf2ghjp5fvq4e68635ql0lv5uv4c82575dcv87a0y8745g6gvjenh49zppsekc82dect9ggp3aqxqnc73dmd38pe4x7v9wwv6namfe7337tczyfz47dyxxzy8fslktv47yn8r87n0nap5qlc9gzgd2yq8m6zj0ulzgaqls2dq2atkfzxu5rjguvcjxnmn7hr8uxgxuzrwtmcftz4emn24vpq5pcwxf29a7w5p80e7f2tv7ags5k0pj9fghaklzm5xrakpsk3gv4xzvzqj6u2denjw60q777r5889xqrvchhtac4xspue4mncvgerscq4dslzkt4mg4zuv6t6gahcvnm2p6r02ns62xsdexs8jxt\",\n    },\n    transfer_private_to_public: {\n        prover: KEY_STORE + \"transfer_private_to_public.prover.1ff64cb\",\n        verifier: \"transfer_private_to_public.verifier.d5b60de\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrwjvqqqqqqqqqgpycqqqqqqqqquvvqzqqqqqqqqceuqyqqqqqqqqyd6qqqqqqqqqqvqqqqqqqqqqqr8z97pzqh2lxcc4tasdu784svuk6lv62sj78flptnzqks3hyu42ymryngdzr2mw6j4nxm4cmx8tgqnfzdkccekds6nhs4c7t2hf84d38jkuufdrf43ls4zm9htqarx9mv3gswcxp74kelgy36yhpsrfkgzdr8vy8580sulvaw36pxjjv0j543rml679z305kt2ju3wzarmsukzkfp56qnc0pjuptzajkes95uspd0uz3fd9fu5vmxwfwq9cj5qh0yjq398h729yygdm0fzkrl9g6faevalks3yc7xl3le38k77t3exqqnn82yyjpunpn763s8hkaguvn67jehqcvt8tvhql8skpesm9tm2hgeryk934h8c8cdcgynjq5cj2qer7kkjc2rrmg5j6agac0ya88up0sl2skxsvkw0rgxlgxjtjqc4g8c3xssq2sk6e2dufvc480rj8vqcrhtqsjqdkzq3nanlvngrjxchnzwfywwjphj5jeza2lyynrk5awz8v6jtwgxu2fs6uqrykz5lz6qpt2dfs670clhjpagxny40nmgeqtf9w8hu4v7yjpgwpv89v05u2ahdryu4538augkjhdx3hvfahwuszd8zyqmcxhrcq039hcrkd5qgadhj257vvrf27dwu64kl0j237efzvt5d360umxw3xk6tej5cxv9zqxqzc7ryqndhttaw5act9kwt8kvxtdjnzy99q8gzmg2429f94h6csrqejzc4n40xjcsdwn98hdekyqzytrh35w6t3r5d86kqt897kv5mldx9w06h4rldk734hvn096gt7e4smleja7canyfpv798cksshgq7hkyt6elvzp3rpj9nd84ykt9lzgjsswn4y8934ay3575u3sx7mkeuca0zsere2q0jmlsl6w6v2qcq424uhnmqn9q5vw22jgy94pry2junps40ug867d79h2zvd0n02nmlz05hd\",\n    },\n    transfer_public: {\n        prover: KEY_STORE + \"transfer_public.prover.a74565e\",\n        verifier: \"transfer_public.verifier.a4c2906\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqq79uqqqqqqqqqp2tcqqqqqqqqqwd4qqqqqqqqqp5ydqqqqqqqqqqvyqqqqqqqqqqqvqqqqqqqqqqqre7drur40rst43dq9at346py7hkmrhexarf59f2tjt4stlsdj5uwrgnrkjjej7jf3djk2w4njtxcq0mezac793craujm8mr7wutcqtu2aday5g03wl0cu2572fsrtpyjhdyqlh0447z7dshlkhksjsusgp4ezrvc0n64fwetfmml3kvfg7n03w2e602sl7et4cpw98hgpzxwzrmzu8r3x77v49njysy2lp55xsqh6t5qjvhyl5a7nzy3e73y7dzvvs9p450u0s8g84prqnrk6jeah89c6882uzqdvxgzcedfmsc43uq99n3ycrjh70ys8n02pyvdvzmu7z608desdd5yw9dc8v3ddrdddmrzz2pupe09yn9esy25cfzmd0wqcgjdxm4dvlt2t6k66lw8e9ccj49qj2ahpht62kh7p56xpvpekenq2arng2t55mwxe59mqpkp6a0yqlwt7tdf98rt3kqlr9tdtq6hua3wrka0mqzhva4nhucxn9u4w92mly69jy2c7cqm5ftnk3m0qxy9spaxwfz0xkqd947yvf2zh8h4y59fltxdpeu4utpv9zw0cr7ad9d462qxyc2f05lezw6dwhcmep942qqv38lp3x9efestt5pk8rplvmrk0zz9zel48l8h9ldfzyd8zyr7knze92cdyanez6k7q5fu6tnw9wqrywjnhevaujz20xn0h3n47g85zs6ejfh7z8jt9qjesqgmdymvcxlceudkdsl49t5r69c4mg7hfwyq88z7zn0efda8fdjmhz8aaq24q34g2ekdzr5w9em3cev2ktxtmupqwltu0nh3fjzm04cy3cgnqlnqq0chzq4rs2dmfjwryxrxxgjtdcsnn9fpwykkxwfuervtznu3lmvhhpdflgwgm0xklu6c0xsxt9dfcp29w2nz6zkjetz7cqremg68eqxq86rn082czp50ldw9qkq6w3p9xxg4hrg\",\n    },\n    transfer_public_to_private: {\n        prover: KEY_STORE + \"transfer_public_to_private.prover.1bcddf9\",\n        verifier: \"transfer_public_to_private.verifier.b094554\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqrhvqqqqqqqqqq8kcqqqqqqqqqqu0xsqqqqqqqqqw0kqqqqqqqqqreg7qqqqqqqqqqvqqqqqqqqqqqta360tn6dhv5z559ejfahwq88lxtd498py5p3vw5u3rwtfvdzpxq7fuqdahsrennq80g8yc6wqjyq8ahdv3jzry0mxceed0jr2cd0wye3e7782pg3phsu8h7hcapfgdghcgg2ykfc2682xefhsp3plqnqp692097k4ja82ecc2descl4d6csug04cz2j9a5pk3djx6xde2ghgq7uqvuhsg47ksueeetvc7mh2qpvqjmph9eekp5waqunkeea9vkvzyl8culmn5t7l9ke3r7uz8v5r8njjdkug6va9vy6axx9aq2kxaqdd9ll2m3j7qg7eyq3k2pnhq7gx2kv8vm3yf5pyqtywt2hvur5uv45y5st53qh970dktd3k709d9sqwv0d6qaksxjcp2cxu282hcewhy66vfs5kp35e6k4shdmjzmglyqqcsnupv8xwdr3596qypzshnuuq8rpm8pyjwtws63wsazqt8tlqhkkxucf0zjc384wvv2jemdnjwd6hn9745h8qc4kqp0rzs9wkx0hcp22xzuyyk7gpsc9ahw7pdenpje3etp37lfrcuntehl8wm2eudrh0j04szjzrv0n3r2gv04mgau5ysqtdcddq44xtt6t6f08c9zuhqukk8zy75jru0exufnh74u97d4xwe005ug7ywmcnyz8u6nvdav2xxqqzpg0luhghl8xu7g0cjgxse0lnqqedc7cc47nc048h2t44gedjq7f49ghajc9gwclp962v4q2855qvgdtkmr29cpwwq8vghlcjv0g6k0a0xa8yrmmnd5l7umnuqcd4x9rcejc3mkjgpw8y6mue2n5tx9cpahnw37yey5k38j98dnr9jss00420jvk7nh59hul7ef69n8ktcltl8f0t93rya5y8d2cspyjp6c7crvg2d4m37z78dualsqr9u7vtge07psdtl4l9785fxl3wgf9u277puvgvuq\",\n    },\n    unbond_public: {\n        prover: KEY_STORE + \"unbond_public.prover.78b2191\",\n        verifier: \"unbond_public.verifier.96c3590\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqp89yqqqqqqqqqp62gqqqqqqqqq892qqqqqqqqqqym2qqqqqqqqqparjqqqqqqqqqqvqqqqqqqqqqqp9uker5608hsejeh46lk307z2ewatecukttkp7elhurugmwqay3ypevdjjt6ly68e9eyt2cnx7dcqrrf24kwmmy5ptlpyy72r5ul2lynras4lluy7ke6spzjx97m2qvjy3jhsdk8tpkwj3vqf37hcncjcqm5mrvp4v8txatw8hhtrklu0pjgx9p39jvvjxsqghf8rxm8edyacw3h8g7mqz8u8acay65tskf42qz5sqfvpfvg9ycnw3mp7jqnv80dnmev9k788aycnx9ufa09qfzjnxwnr6503ckc8465welwq7vxqlqyuezzshvq3gfpvdnqgrsda7kv88sq7nqpttlyqczrmsf6xln80ejcwshagevykxjc09numhdc4r7qlme5zlrjru7lyexcxq75qvtpqhkkz0zmfmm9paddlrk88xcctmhdun6rt0rzkdxx0fdgughvxlmyq32ct8s0k0qlf3rwlggvhvsw4ekl683ls9la7lcga87ereutr34fke6qzdkxz94rqzrl2msyhax9grx2t5jtkfenxsudq6mfjv0uhtxycalyk2k6c4hwdq5z33x4kcgns2tsx5hstvv6pp9phv0cedf4ysqgavdjlnx2g4tvw9wmmz7ghmm03jkutq568pxx7ahp7kjfe9ta2eas7qkj2r4ue0pwa5ft9k88r5qw32mymhz4p3cpg5g5v0z6kkukh9zxjzsdqnvglsdtj64u4dtu2epnnuckz3fgqw4mrn54nvvwv8zquwsz9jqp4zrux2xghqk6fh4y29vm3aq4v6kh4zmnwhuf0y249grf8u7xc6cu3rrz5ugpnzvawpyypmfnl58xgm0gq8m8zsn7uw436hhjwewyhwkva6trxdfxfr7rpn2qdu2yp2ulu7ezpr0meet8ht3zsqjyezyylcgrjttgphl0t2ckte6jwm6la7mlhz7ya8rancl44m9dpy798f9\",\n    },\n    set_validator_state: {\n        prover: KEY_STORE + \"set_validator_state.prover.5ce19be\",\n        verifier: \"set_validator_state.verifier.730d95b\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqqpehuqqqqqqqqq930cqqqqqqqqq295qzqqqqqqqqyyyqyqqqqqqqzjjvqgqqqqqqqqvqqqqqqqqqqqyjhdhawnd33kv88ehql385slkd7lyr46jnf7yathmnxnr7at2j6u4nfkkvryujwt8rvhdfpuw94qq8e7sp33sjtyz53q89k85ttcg2cvadvuadeuq5xn4hgkmvm3qj93er0t2pjpd2p4kd3zy2gqmqd5qpfzdk973253ufzafqwd9879c7wpdv500a4xhetxkareamyl2qqzdd5hxl94vnmrkluzx0te32rkusqs20xswldqdgekfh6p25yxjhls20k59lsfn9az8jak9lr6r745ujsq0jq9fvugqyqchuca8xq6stq0svvu7e4xguc84t3s72erg4ve2z3nsr3jqv6jtala9j3xf5msksupprwwxkwwl58pv2hmr4g5h4xqym3nj6ax7ujx70np7egc4nw0w3j02m34eq00gssjq0pf9xfltxtef29crye3sul45kkawnrl6uzvquszlgltwtgx2xjlehgh0xpdm68dyjev9qxsleetpc33mns5jakrmqqryk8qgmnc56dzgcwm99eccq6c93576s946jztmuvgp8522y00jpck54wlcg3me44sk8usehsnjgm85zmypjsf7nlp06na927dtqp7u45jnd3em0n9h0wgtgvwh7lyhq4guwdfxws8mswwzfr5fjdtv0smjeq3r58v03amrhgr2ex4h7q8wapp8h5ug8vh0fxkt6yp3l2mas3l0jmmpedy9vx4lnxmjwn8t4wxyrdnnr54jxmp0wyu3sf6wwkqa6r2g2u9qu5km92fjnckme07mrxghuxh9ktpj9cvaf08sccdtdwjsnkyt9qu2x5ft27tkrskudrqpyr63x640xlk9wqpmy3edx58wxwzesmx22v62y6lshjv3wur83jlmwm74qqpd34ewmrk7eg0jfp7cretx5jwfv5c904v9qazfyluh5fpdczgx9fluayuukfwnqjq8tdwx3shuy5\"\n    },\n    unbond_delegator_as_validator: {\n        prover: KEY_STORE + \"unbond_delegator_as_validator.prover.115a86b\",\n        verifier: \"unbond_delegator_as_validator.verifier.9585609\",\n        verifyingKey:\n            \"verifier1qygqqqqqqqqqqq8c9gqqqqqqqqqw72sqqqqqqqqqlfvqqqqqqqqqp2t0qqqqqqqqqqencqqqqqqqqqqvqqqqqqqqqqq0grv3rvp00lpr8rd0gvrlzmxfldeur8rd0rh2amsut4350grudguqrf59q2x4y9mvh27dptpllesqacgeq7er0s9xjrt87q9hqt8ntaxjycfmdxf5xqm749xegmh7vzx6d6pzmzesmhtlue58gapec39sp545htqgeff2a4ahtm8xlswh8yhwqax83yexvuwxfxrnjkueszuha2v8txhyzcg0umtgrqmg5gd2szf44v65920m8dmazcjpllt66l526k6khzsg3eunzqwtd3f9afp5lkaaey7dmltvwzkslm5x54gfcqtf2ma4uej82juvpnxz2e5u3n7a7e3668e42djfjewc5d6h5w7jrz8fmzw56u0nnujy48a0csta3vqz7zux0a3enz27y76zkm5wpppnaq69498k0n9dexftjt52ddtmh2nq34p8m2mt9n68drv2ndm7v75q6dwx5675ycapv7x45vvfhyywg0pq2hvk44mc0ry4czvemt8t7ayfnnksupl20rvmsmqrngaf8gyqza4pytae47wr8mv3r90qmesguclvxvdp7wz3ygyv4rxu0vhjf9lmmymyjcf64ampvtup3x5fst6cq8mgel7t9czxsfx53a35mpfmgdpr8hk3cj798y0fa8zf4a8cw9qu2xsp37vhnkwl25pjfy6lu7h6lqxj8dez7k8g4km3yfxnqjhvyh6279r92a6rdg2j9spuhrq2dyadxygytnc9jqxfh3jtaxzydtz57gqg564f43m5hlswpel98zlnz8lc5740srsd96fv5k0aqhku8xd0q6myj77h7m4n0we5mcxa24zt0rspl8602e3adu06j3h9e9tz8sdw5s005aw0e8y4mmhv3u5swhfl5yv4aarj45j5pg57htp42s80c3hcpzghmmnan73lw0lkjfgxff2989yhu2n0qakdvdqvelz473mhwlrlad3y5f\"\n    },\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"public\",\n    \"transferPublic\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): Error {\n    console.error(message);\n    throw message;\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@aleohq/wasm\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n","import {initThreadPool, ProgramManager, PrivateKey, verifyFunctionExecution, FunctionKeyPair} from \"./index\";\nimport { AleoKeyProvider, AleoKeyProviderParams} from \"./function-key-provider\";\nimport { expose } from \"comlink\";\n\nawait initThreadPool();\n\nconst defaultHost = \"https://api.explorer.aleo.org/v1\";\nconst keyProvider = new AleoKeyProvider();\nconst programManager = new ProgramManager(\n    defaultHost,\n    keyProvider,\n    undefined\n);\n\nkeyProvider.useCache(true);\n\nlet lastLocalProgram: string = \"\";\n\nexport interface WorkerAPI {\n    executeOffline: (\n        localProgram: string,\n        aleoFunction: string,\n        inputs: string[],\n        privateKey: string\n    ) => Promise<{ outputs: any; execution: string } | string>;\n\n    getPrivateKey: () => Promise<PrivateKey>;\n}\nasync function executeOffline(\n    localProgram: string,\n    aleoFunction: string,\n    inputs: string[],\n    privateKey: string,\n    proveExecution = false\n) {\n    console.log(\"Web worker: Executing function locally...\");\n    const startTime = performance.now();\n\n    try {\n        // Ensure the program is valid and that it contains the function specified\n        const program = programManager.createProgramFromSource(localProgram);\n        if (program instanceof Error) {\n            throw \"Error creating program from source\";\n        }\n        const program_id = program.id();\n        if (!program.hasFunction(aleoFunction)) {\n            throw `Program ${program_id} does not contain function ${aleoFunction}`;\n        }\n        const cacheKey = `${program_id}:${aleoFunction}`;\n\n        // Get the program imports\n        const imports = await programManager.networkClient.getProgramImports(\n            localProgram\n        );\n\n        if (imports instanceof Error) {\n            throw \"Error getting program imports\";\n        }\n        // Get the proving and verifying keys for the function\n        if (lastLocalProgram !== localProgram) {\n            const keys = <FunctionKeyPair>await programManager.synthesizeKeys(\n                localProgram,\n                aleoFunction,\n                inputs,\n                PrivateKey.from_string(privateKey)\n            );\n            programManager.keyProvider.cacheKeys(cacheKey, keys);\n            lastLocalProgram = localProgram;\n        }\n\n        // Pass the cache key to the execute function\n        const keyParams = new AleoKeyProviderParams({\n            cacheKey: cacheKey,\n        });\n\n        // Execute the function locally\n        const response = await programManager.run(\n            localProgram,\n            aleoFunction,\n            inputs,\n            proveExecution,\n            imports,\n            keyParams,\n            undefined,\n            undefined,\n            PrivateKey.from_string(privateKey),\n        );\n\n        // Return the outputs to the main thread\n        console.log(\n            `Web worker: Local execution completed in ${\n                performance.now() - startTime\n            } ms`\n        );\n        const outputs = response.getOutputs();\n        const execution = response.getExecution();\n        let executionString = \"\";\n\n        const keys = keyProvider.getKeys(cacheKey);\n\n        if (keys instanceof Error) {\n            throw \"Could not get verifying key\";\n        }\n\n        const verifyingKey = keys[1];\n\n        if (execution) {\n            verifyFunctionExecution(\n                execution,\n                verifyingKey,\n                program,\n                \"hello\"\n            );\n            executionString = execution.toString();\n            console.log(\"Execution verified successfully: \" + execution);\n        } else {\n            executionString = \"\";\n        }\n\n        console.log(`Function execution response: ${outputs}`);\n\n        return { outputs: outputs, execution: executionString };\n    } catch (error) {\n        console.error(error);\n        return error ? error.toString() : \"Unknown error\";\n    }\n}\n\nasync function getPrivateKey() {\n    const privateKey = new PrivateKey();\n    return privateKey.to_string();\n}\n\nconst workerAPI = { executeOffline, getPrivateKey };\nexpose(workerAPI);\n","function spawnWorker(url, module, memory, address) {\n        return new Promise((resolve) => {\n            const worker = new Worker(url, {\n                type: \"module\",\n            });\n\n            worker.addEventListener(\"message\", (event) => {\n                // When running in Node, this allows the process to exit\n                // even though the Worker is still running.\n                if (worker.unref) {\n                    worker.unref();\n                }\n\n                resolve(worker);\n            }, {\n                capture: true,\n                once: true,\n            });\n\n            worker.postMessage({\n                module,\n                memory,\n                address,\n            });\n        });\n    }\n\nlet wasm;\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_3.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm.wasm_bindgen__convert__closures__invoke1_mut__h53d50e21bb2d5c71(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Verify an execution with a single function and a single transition. Executions with multiple\n* transitions or functions will fail to verify. Also, this does not verify that the state root of\n* the execution is included in the Aleo Network ledger.\n*\n* @param {Execution} execution The function execution to verify\n* @param {VerifyingKey} verifying_key The verifying key for the function\n* @param {Program} program The program that the function execution belongs to\n* @param {String} function_id The name of the function that was executed\n* @returns {boolean} True if the execution is valid, false otherwise\n* @param {Execution} execution\n* @param {VerifyingKey} verifying_key\n* @param {Program} program\n* @param {string} function_id\n* @returns {boolean}\n*/\nfunction verifyFunctionExecution(execution, verifying_key, program, function_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(execution, Execution);\n        _assertClass(verifying_key, VerifyingKey);\n        _assertClass(program, Program);\n        const ptr0 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyFunctionExecution(retptr, execution.__wbg_ptr, verifying_key.__wbg_ptr, program.__wbg_ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nlet cachedBigInt64Memory0 = null;\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0 === null || cachedBigInt64Memory0.buffer !== wasm.memory.buffer) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} receiver\n*/\nfunction runRayonThread(receiver) {\n    wasm.runRayonThread(receiver);\n}\n\n/**\n* @param {URL} url\n* @param {number} num_threads\n* @returns {Promise<void>}\n*/\nfunction initThreadPool(url, num_threads) {\n    const ret = wasm.initThreadPool(addHeapObject(url), num_threads);\n    return takeObject(ret);\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_205(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__he97f6a3b9df30e2b(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n* Public address of an Aleo account\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Address.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * Derive an Aleo address from a private key\n    *\n    * @param {PrivateKey} private_key The private key to derive the address from\n    * @returns {Address} Address corresponding to the private key\n    * @param {PrivateKey} private_key\n    * @returns {Address}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.address_from_private_key(private_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Derive an Aleo address from a view key\n    *\n    * @param {ViewKey} view_key The view key to derive the address from\n    * @returns {Address} Address corresponding to the view key\n    * @param {ViewKey} view_key\n    * @returns {Address}\n    */\n    static from_view_key(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.address_from_view_key(view_key.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Create an aleo address object from a string representation of an address\n    *\n    * @param {string} address String representation of an addressm\n    * @returns {Address} Address\n    * @param {string} address\n    * @returns {Address}\n    */\n    static from_string(address) {\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.address_from_string(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Get a string representation of an Aleo address object\n    *\n    * @param {Address} Address\n    * @returns {string} String representation of the address\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Verify a signature for a message signed by the address\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {boolean} Boolean representing whether or not the signature is valid\n    * @param {Uint8Array} message\n    * @param {Signature} signature\n    * @returns {boolean}\n    */\n    verify(message, signature) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Signature);\n        const ret = wasm.address_verify(this.__wbg_ptr, ptr0, len0, signature.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* A program that can be executed on the Aleo blockchain.\n*/\nclass Execution {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Execution.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_execution_free(ptr);\n    }\n    /**\n    * Returns the string representation of the execution.\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.execution_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates an execution object from a string representation of an execution.\n    * @param {string} execution\n    * @returns {Execution}\n    */\n    static fromString(execution) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(execution, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.execution_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Execution.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo function execution response\n*\n* This object is returned by the execution of an Aleo function off-chain. It provides methods for\n* retrieving the outputs of the function execution.\n*/\nclass ExecutionResponse {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ExecutionResponse.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_executionresponse_free(ptr);\n    }\n    /**\n    * Get the outputs of the executed function\n    *\n    * @returns {Array} Array of strings representing the outputs of the function\n    * @returns {Array<any>}\n    */\n    getOutputs() {\n        const ret = wasm.executionresponse_getOutputs(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns the execution object if present, null if otherwise.\n    *\n    * @returns {Execution | undefined} The execution object if present, null if otherwise\n    * @returns {Execution | undefined}\n    */\n    getExecution() {\n        const ret = wasm.executionresponse_getExecution(this.__wbg_ptr);\n        return ret === 0 ? undefined : Execution.__wrap(ret);\n    }\n    /**\n    * Returns the program keys if present\n    * @returns {KeyPair}\n    */\n    getKeys() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getKeys(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the proving_key if the proving key was cached in the Execution response.\n    * Note the proving key is removed from the response object after the first call to this\n    * function. Subsequent calls will return null.\n    *\n    * @returns {ProvingKey | undefined} The proving key\n    * @returns {ProvingKey | undefined}\n    */\n    getProvingKey() {\n        const ret = wasm.executionresponse_getProvingKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : ProvingKey.__wrap(ret);\n    }\n    /**\n    * Returns the verifying_key associated with the program\n    *\n    * @returns {VerifyingKey} The verifying key\n    * @returns {VerifyingKey}\n    */\n    getVerifyingKey() {\n        const ret = wasm.executionresponse_getVerifyingKey(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n    /**\n    * Returns the function identifier\n    * @returns {string}\n    */\n    getFunctionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.executionresponse_getFunctionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the program\n    * @returns {Program}\n    */\n    getProgram() {\n        const ret = wasm.executionresponse_getProgram(this.__wbg_ptr);\n        return Program.__wrap(ret);\n    }\n}\n/**\n*/\nclass Field {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Field.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_field_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.field_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {string} field\n    * @returns {Field}\n    */\n    static fromString(field) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(field, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.field_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeyPair.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Create new key pair from proving and verifying keys\n    *\n    * @param {ProvingKey} proving_key Proving key corresponding to a function in an Aleo program\n    * @param {VerifyingKey} verifying_key Verifying key corresponding to a function in an Aleo program\n    * @returns {KeyPair} Key pair object containing both the function proving and verifying keys\n    * @param {ProvingKey} proving_key\n    * @param {VerifyingKey} verifying_key\n    */\n    constructor(proving_key, verifying_key) {\n        _assertClass(proving_key, ProvingKey);\n        var ptr0 = proving_key.__destroy_into_raw();\n        _assertClass(verifying_key, VerifyingKey);\n        var ptr1 = verifying_key.__destroy_into_raw();\n        const ret = wasm.keypair_new(ptr0, ptr1);\n        return KeyPair.__wrap(ret);\n    }\n    /**\n    * Get the proving key. This method will remove the proving key from the key pair\n    *\n    * @returns {ProvingKey | Error}\n    * @returns {ProvingKey}\n    */\n    provingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_provingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the verifying key. This method will remove the verifying key from the key pair\n    *\n    * @returns {VerifyingKey | Error}\n    * @returns {VerifyingKey}\n    */\n    verifyingKey() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_verifyingKey(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* An offline query object that allows users to externally insert a valid state path and state root\n* for external records\n*/\nclass OfflineQuery {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OfflineQuery.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_offlinequery_free(ptr);\n    }\n    /**\n    * Creates a new offline query object. The state root is required to be passed in as a string\n    * @param {string} state_root\n    */\n    constructor(state_root) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(state_root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a new state path to the offline query object.\n    *\n    * @param {string} commitment: The commitment corresponding to a record inpout\n    * @param {string} state_path: The state path corresponding to the commitment\n    * @param {string} commitment\n    * @param {string} state_path\n    */\n    addStatePath(commitment, state_path) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(state_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.offlinequery_addStatePath(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a json string representation of the offline query object\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.offlinequery_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create an offline query object from a json string representation\n    * @param {string} s\n    * @returns {OfflineQuery}\n    */\n    static fromString(s) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.offlinequery_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OfflineQuery.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private key of an Aleo account\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * Generate a new private key using a cryptographically secure random number generator\n    *\n    * @returns {PrivateKey}\n    */\n    constructor() {\n        const ret = wasm.privatekey_new();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a series of unchecked bytes\n    *\n    * @param {Uint8Array} seed Unchecked 32 byte long Uint8Array acting as the seed for the private key\n    * @returns {PrivateKey}\n    * @param {Uint8Array} seed\n    * @returns {PrivateKey}\n    */\n    static from_seed_unchecked(seed) {\n        const ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_from_seed_unchecked(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get a private key from a string representation of a private key\n    *\n    * @param {string} seed String representation of a private key\n    * @returns {PrivateKey}\n    * @param {string} private_key\n    * @returns {PrivateKey}\n    */\n    static from_string(private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_from_string(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the private key. This function should be used very carefully\n    * as it exposes the private key plaintext\n    *\n    * @returns {string} String representation of a private key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the view key corresponding to the private key\n    *\n    * @returns {ViewKey}\n    * @returns {ViewKey}\n    */\n    to_view_key() {\n        const ret = wasm.privatekey_to_view_key(this.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get the address corresponding to the private key\n    *\n    * @returns {Address}\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_private_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Sign a message with the private key\n    *\n    * @param {Uint8Array} Byte array representing a message signed by the address\n    * @returns {Signature} Signature generated by signing the message with the address\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(this.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a new randomly generated private key ciphertext using a secret. The secret is sensitive\n    * and will be needed to decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static newEncrypted(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_newEncrypted(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Encrypt an existing private key with a secret. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKeyCiphertext | Error} Ciphertext representation of the private key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    toCiphertext(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from a private key ciphertext and secret originally used to encrypt it\n    *\n    * @param {PrivateKeyCiphertext} ciphertext Ciphertext representation of the private key\n    * @param {string} secret Secret originally used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {PrivateKeyCiphertext} ciphertext\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    static fromPrivateKeyCiphertext(ciphertext, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(ciphertext, PrivateKeyCiphertext);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_fromPrivateKeyCiphertext(retptr, ciphertext.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Private Key in ciphertext form\n*/\nclass PrivateKeyCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PrivateKeyCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekeyciphertext_free(ptr);\n    }\n    /**\n    * Encrypt a private key using a secret string. The secret is sensitive and will be needed to\n    * decrypt the private key later, so it should be stored securely\n    *\n    * @param {PrivateKey} private_key Private key to encrypt\n    * @param {string} secret Secret to encrypt the private key with\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {PrivateKey} private_key\n    * @param {string} secret\n    * @returns {PrivateKeyCiphertext}\n    */\n    static encryptPrivateKey(private_key, secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekey_toCiphertext(retptr, private_key.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Decrypts a private ciphertext using a secret string. This must be the same secret used to\n    * encrypt the private key\n    *\n    * @param {string} secret Secret used to encrypt the private key\n    * @returns {PrivateKey | Error} Private key\n    * @param {string} secret\n    * @returns {PrivateKey}\n    */\n    decryptToPrivateKey(secret) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(secret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_decryptToPrivateKey(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the ciphertext string\n    *\n    * @returns {string} Ciphertext string\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekeyciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Creates a PrivateKeyCiphertext from a string\n    *\n    * @param {string} ciphertext Ciphertext string\n    * @returns {PrivateKeyCiphertext | Error} Private key ciphertext\n    * @param {string} ciphertext\n    * @returns {PrivateKeyCiphertext}\n    */\n    static fromString(ciphertext) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.privatekeyciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKeyCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo program\n*\n* This object is required to create an Execution or Deployment transaction. It includes several\n* convenience methods for enumerating available functions and each functions' inputs in a\n* javascript object for usage in creation of web forms for input capture.\n*/\nclass Program {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Program.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_program_free(ptr);\n    }\n    /**\n    * Create a program from a program string\n    *\n    * @param {string} program Aleo program source code\n    * @returns {Program | Error} Program object\n    * @param {string} program\n    * @returns {Program}\n    */\n    static fromString(program) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Program.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the program\n    *\n    * @returns {string} String containing the program source code\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine if a function is present in the program\n    *\n    * @param {string} functionName Name of the function to check for\n    * @returns {boolean} True if the program is valid, false otherwise\n    * @param {string} function_name\n    * @returns {boolean}\n    */\n    hasFunction(function_name) {\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.program_hasFunction(this.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get javascript array of functions names in the program\n    *\n    * @returns {Array} Array of all function names present in the program\n    *\n    * @example\n    * const expected_functions = [\n    *   \"mint\",\n    *   \"transfer_private\",\n    *   \"transfer_private_to_public\",\n    *   \"transfer_public\",\n    *   \"transfer_public_to_private\",\n    *   \"join\",\n    *   \"split\",\n    *   \"fee\"\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_functions = credits_program.getFunctions();\n    * console.log(credits_functions === expected_functions); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getFunctions() {\n        const ret = wasm.program_getFunctions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Get a javascript object representation of the function inputs and types. This can be used\n    * to generate a web form to capture user inputs for an execution of a function.\n    *\n    * @param {string} function_name Name of the function to get inputs for\n    * @returns {Array | Error} Array of function inputs\n    *\n    * @example\n    * const expected_inputs = [\n    *     {\n    *       type:\"record\",\n    *       visibility:\"private\",\n    *       record:\"credits\",\n    *       members:[\n    *         {\n    *           name:\"microcredits\",\n    *           type:\"u64\",\n    *           visibility:\"private\"\n    *         }\n    *       ],\n    *       register:\"r0\"\n    *     },\n    *     {\n    *       type:\"address\",\n    *       visibility:\"private\",\n    *       register:\"r1\"\n    *     },\n    *     {\n    *       type:\"u64\",\n    *       visibility:\"private\",\n    *       register:\"r2\"\n    *     }\n    * ];\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const transfer_function_inputs = credits_program.getFunctionInputs(\"transfer_private\");\n    * console.log(transfer_function_inputs === expected_inputs); // Output should be \"true\"\n    * @param {string} function_name\n    * @returns {Array<any>}\n    */\n    getFunctionInputs(function_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getFunctionInputs(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a the list of a program's mappings and the names/types of their keys and values.\n    *\n    * @returns {Array | Error} - An array of objects representing the mappings in the program\n    * @example\n    * const expected_mappings = [\n    *    {\n    *       name: \"account\",\n    *       key_name: \"owner\",\n    *       key_type: \"address\",\n    *       value_name: \"microcredits\",\n    *       value_type: \"u64\"\n    *    }\n    * ]\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_mappings = credits_program.getMappings();\n    * console.log(credits_mappings === expected_mappings); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getMappings() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_getMappings(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program record and its types\n    *\n    * @param {string} record_name Name of the record to get members for\n    * @returns {Object | Error} Object containing the record name, type, and members\n    *\n    * @example\n    *\n    * const expected_record = {\n    *     type: \"record\",\n    *     record: \"Credits\",\n    *     members: [\n    *       {\n    *         name: \"owner\",\n    *         type: \"address\",\n    *         visibility: \"private\"\n    *       },\n    *       {\n    *         name: \"microcredits\",\n    *         type: \"u64\",\n    *         visibility: \"private\"\n    *       }\n    *     ];\n    *  };\n    *\n    * const credits_program = aleo_wasm.Program.getCreditsProgram();\n    * const credits_record = credits_program.getRecordMembers(\"Credits\");\n    * console.log(credits_record === expected_record); // Output should be \"true\"\n    * @param {string} record_name\n    * @returns {object}\n    */\n    getRecordMembers(record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getRecordMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a javascript object representation of a program struct and its types\n    *\n    * @param {string} struct_name Name of the struct to get members for\n    * @returns {Array | Error} Array containing the struct members\n    *\n    * @example\n    *\n    * const STRUCT_PROGRAM = \"program token_issue.aleo;\n    *\n    * struct token_metadata:\n    *     network as u32;\n    *     version as u32;\n    *\n    * struct token:\n    *     token_id as u32;\n    *     metadata as token_metadata;\n    *\n    * function no_op:\n    *    input r0 as u64;\n    *    output r0 as u64;\"\n    *\n    * const expected_struct_members = [\n    *    {\n    *      name: \"token_id\",\n    *      type: \"u32\",\n    *    },\n    *    {\n    *      name: \"metadata\",\n    *      type: \"struct\",\n    *      struct_id: \"token_metadata\",\n    *      members: [\n    *       {\n    *         name: \"network\",\n    *         type: \"u32\",\n    *       }\n    *       {\n    *         name: \"version\",\n    *         type: \"u32\",\n    *       }\n    *     ]\n    *   }\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(STRUCT_PROGRAM);\n    * const struct_members = program.getStructMembers(\"token\");\n    * console.log(struct_members === expected_struct_members); // Output should be \"true\"\n    * @param {string} struct_name\n    * @returns {Array<any>}\n    */\n    getStructMembers(struct_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(struct_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.program_getStructMembers(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the credits.aleo program\n    *\n    * @returns {Program} The credits.aleo program\n    * @returns {Program}\n    */\n    static getCreditsProgram() {\n        const ret = wasm.program_getCreditsProgram();\n        return Program.__wrap(ret);\n    }\n    /**\n    * Get the id of the program\n    *\n    * @returns {string} The id of the program\n    * @returns {string}\n    */\n    id() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.program_id(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Determine equality with another program\n    *\n    * @param {Program} other The other program to compare\n    * @returns {boolean} True if the programs are equal, false otherwise\n    * @param {Program} other\n    * @returns {boolean}\n    */\n    isEqual(other) {\n        _assertClass(other, Program);\n        const ret = wasm.program_isEqual(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Get program_imports\n    *\n    * @returns {Array} The program imports\n    *\n    * @example\n    *\n    * const DOUBLE_TEST = \"import multiply_test.aleo;\n    *\n    * program double_test.aleo;\n    *\n    * function double_it:\n    *     input r0 as u32.private;\n    *     call multiply_test.aleo/multiply 2u32 r0 into r1;\n    *     output r1 as u32.private;\";\n    *\n    * const expected_imports = [\n    *    \"multiply_test.aleo\"\n    * ];\n    *\n    * const program = aleo_wasm.Program.fromString(DOUBLE_TEST_PROGRAM);\n    * const imports = program.getImports();\n    * console.log(imports === expected_imports); // Output should be \"true\"\n    * @returns {Array<any>}\n    */\n    getImports() {\n        const ret = wasm.program_getImports(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nclass ProgramManager {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_programmanager_free(ptr);\n    }\n    /**\n    * Deploy an Aleo program\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being deployed\n    * @param imports A javascript object holding the source code of any imported programs in the\n    * form \\{\"program_name1\": \"program_source_code\", \"program_name2\": \"program_source_code\", ..\\}.\n    * Note that all imported programs must be deployed on chain before the main program in order\n    * for the deployment to succeed\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the program deployment in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildDeploymentTransaction(private_key, program, fee_credits, fee_record, url, imports, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr1 = fee_record.__destroy_into_raw();\n        }\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr3 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr4 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildDeploymentTransaction(private_key.__wbg_ptr, ptr0, len0, fee_credits, ptr1, ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the fee for a program deployment\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The source code of the program being deployed\n    * @param imports (optional) Provide a list of imports to use for the deployment fee estimation\n    * in the form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @returns {u64 | Error}\n    * @param {string} program\n    * @param {object | undefined} imports\n    * @returns {Promise<bigint>}\n    */\n    static estimateDeploymentFee(program, imports) {\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_estimateDeploymentFee(ptr0, len0, isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the component of the deployment cost which comes from the fee for the program name.\n    * Note that this cost does not represent the entire cost of deployment. It is additional to\n    * the cost of the size (in bytes) of the deployment.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param name The name of the program to be deployed\n    * @returns {u64 | Error}\n    * @param {string} name\n    * @returns {bigint}\n    */\n    static estimateProgramNameCost(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateProgramNameCost(retptr, ptr0, len0);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Execute an arbitrary function locally\n    *\n    * @param {PrivateKey} private_key The private key of the sender\n    * @param {string} program The source code of the program being executed\n    * @param {string} function The name of the function to execute\n    * @param {Array} inputs A javascript array of inputs to the function\n    * @param {boolean} prove_execution If true, the execution will be proven and an execution object\n    * containing the proof and the encrypted inputs and outputs needed to verify the proof offline\n    * will be returned.\n    * @param {boolean} cache Cache the proving and verifying keys in the Execution response.\n    * If this is set to 'true' the keys synthesized will be stored in the Execution Response\n    * and the `ProvingKey` and `VerifyingKey` can be retrieved from the response via the `.getKeys()`\n    * method.\n    * @param {Object | undefined} imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param {ProvingKey | undefined} proving_key (optional) Provide a verifying key to use for the function execution\n    * @param {VerifyingKey | undefined} verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {boolean} prove_execution\n    * @param {boolean} cache\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {string | undefined} url\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<ExecutionResponse>}\n    */\n    static executeFunctionOffline(private_key, program, _function, inputs, prove_execution, cache, imports, proving_key, verifying_key, url, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr2 = proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr3 = verifying_key.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_executeFunctionOffline(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), prove_execution, cache, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr2, ptr3, ptr4, len4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Execute Aleo function and create an Aleo execution transaction\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program being executed\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * If this is set to 'true' the keys synthesized (or passed in as optional parameters via the\n    * `proving_key` and `verifying_key` arguments) will be stored in the ProgramManager's memory\n    * and used for subsequent transactions. If this is set to 'false' the proving and verifying\n    * keys will be deallocated from memory after the transaction is executed.\n    * @param imports (optional) Provide a list of imports to use for the function execution in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the function execution\n    * @param verifying_key (optional) Provide a verifying key to use for the function execution\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildExecutionTransaction(private_key, program, _function, inputs, fee_credits, fee_record, url, imports, proving_key, verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr4 = proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr5 = verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildExecutionTransaction(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), fee_credits, ptr2, ptr3, len3, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate Fee for Aleo function execution. Note if \"cache\" is set to true, the proving and\n    * verifying keys will be stored in the ProgramManager's memory and used for subsequent\n    * program executions.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param private_key The private key of the sender\n    * @param program The source code of the program to estimate the execution fee for\n    * @param function The name of the function to execute\n    * @param inputs A javascript array of inputs to the function\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param imports (optional) Provide a list of imports to use for the fee estimation in the\n    * form of a javascript object where the keys are a string of the program name and the values\n    * are a string representing the program source code \\{ \"hello.aleo\": \"hello.aleo source code\" \\}\n    * @param proving_key (optional) Provide a verifying key to use for the fee estimation\n    * @param verifying_key (optional) Provide a verifying key to use for the fee estimation\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} _function\n    * @param {Array<any>} inputs\n    * @param {string | undefined} url\n    * @param {object | undefined} imports\n    * @param {ProvingKey | undefined} proving_key\n    * @param {VerifyingKey | undefined} verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<bigint>}\n    */\n    static estimateExecutionFee(private_key, program, _function, inputs, url, imports, proving_key, verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        let ptr3 = 0;\n        if (!isLikeNone(proving_key)) {\n            _assertClass(proving_key, ProvingKey);\n            ptr3 = proving_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(verifying_key)) {\n            _assertClass(verifying_key, VerifyingKey);\n            ptr4 = verifying_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr5 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_estimateExecutionFee(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), ptr2, len2, isLikeNone(imports) ? 0 : addHeapObject(imports), ptr3, ptr4, ptr5);\n        return takeObject(ret);\n    }\n    /**\n    * Estimate the finalize fee component for executing a function. This fee is additional to the\n    * size of the execution of the program in bytes. If the function does not have a finalize\n    * step, then the finalize fee is 0.\n    *\n    * Disclaimer: Fee estimation is experimental and may not represent a correct estimate on any current or future network\n    *\n    * @param program The program containing the function to estimate the finalize fee for\n    * @param function The function to estimate the finalize fee for\n    * @returns {u64 | Error} Fee in microcredits\n    * @param {string} program\n    * @param {string} _function\n    * @returns {bigint}\n    */\n    static estimateFinalizeFee(program, _function) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(_function, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.programmanager_estimateFinalizeFee(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getBigInt64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return BigInt.asUintN(64, r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Join two records together to create a new record with an amount of credits equal to the sum\n    * of the credits of the two original records\n    *\n    * @param private_key The private key of the sender\n    * @param record_1 The first record to combine\n    * @param record_2 The second record to combine\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param join_proving_key (optional) Provide a proving key to use for the join function\n    * @param join_verifying_key (optional) Provide a verifying key to use for the join function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {RecordPlaintext} record_1\n    * @param {RecordPlaintext} record_2\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} join_proving_key\n    * @param {VerifyingKey | undefined} join_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildJoinTransaction(private_key, record_1, record_2, fee_credits, fee_record, url, join_proving_key, join_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(record_1, RecordPlaintext);\n        var ptr0 = record_1.__destroy_into_raw();\n        _assertClass(record_2, RecordPlaintext);\n        var ptr1 = record_2.__destroy_into_raw();\n        let ptr2 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr2 = fee_record.__destroy_into_raw();\n        }\n        var ptr3 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        let ptr4 = 0;\n        if (!isLikeNone(join_proving_key)) {\n            _assertClass(join_proving_key, ProvingKey);\n            ptr4 = join_proving_key.__destroy_into_raw();\n        }\n        let ptr5 = 0;\n        if (!isLikeNone(join_verifying_key)) {\n            _assertClass(join_verifying_key, VerifyingKey);\n            ptr5 = join_verifying_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr6 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr7 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr8 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildJoinTransaction(private_key.__wbg_ptr, ptr0, ptr1, fee_credits, ptr2, ptr3, len3, ptr4, ptr5, ptr6, ptr7, ptr8);\n        return takeObject(ret);\n    }\n    /**\n    * Split an Aleo credits record into two separate records. This function does not require a fee.\n    *\n    * @param private_key The private key of the sender\n    * @param split_amount The amount of the credit split. This amount will be subtracted from the\n    * value of the record and two new records will be created with the split amount and the remainder\n    * @param amount_record The record to split\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param split_proving_key (optional) Provide a proving key to use for the split function\n    * @param split_verifying_key (optional) Provide a verifying key to use for the split function\n    * @returns {Transaction | Error} Transaction object\n    * @param {PrivateKey} private_key\n    * @param {number} split_amount\n    * @param {RecordPlaintext} amount_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} split_proving_key\n    * @param {VerifyingKey | undefined} split_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildSplitTransaction(private_key, split_amount, amount_record, url, split_proving_key, split_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        _assertClass(amount_record, RecordPlaintext);\n        var ptr0 = amount_record.__destroy_into_raw();\n        var ptr1 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(split_proving_key)) {\n            _assertClass(split_proving_key, ProvingKey);\n            ptr2 = split_proving_key.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(split_verifying_key)) {\n            _assertClass(split_verifying_key, VerifyingKey);\n            ptr3 = split_verifying_key.__destroy_into_raw();\n        }\n        let ptr4 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr4 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildSplitTransaction(private_key.__wbg_ptr, split_amount, ptr0, ptr1, len1, ptr2, ptr3, ptr4);\n        return takeObject(ret);\n    }\n    /**\n    * Send credits from one Aleo account to another\n    *\n    * @param private_key The private key of the sender\n    * @param amount_credits The amount of credits to send\n    * @param recipient The recipient of the transaction\n    * @param transfer_type The type of the transfer (options: \"private\", \"public\", \"private_to_public\", \"public_to_private\")\n    * @param amount_record The record to fund the amount from\n    * @param fee_credits The amount of credits to pay as a fee\n    * @param fee_record The record to spend the fee from\n    * @param url The url of the Aleo network node to send the transaction to\n    * @param transfer_verifying_key (optional) Provide a verifying key to use for the transfer\n    * function\n    * @param fee_proving_key (optional) Provide a proving key to use for the fee execution\n    * @param fee_verifying_key (optional) Provide a verifying key to use for the fee execution\n    * @returns {Transaction | Error}\n    * @param {PrivateKey} private_key\n    * @param {number} amount_credits\n    * @param {string} recipient\n    * @param {string} transfer_type\n    * @param {RecordPlaintext | undefined} amount_record\n    * @param {number} fee_credits\n    * @param {RecordPlaintext | undefined} fee_record\n    * @param {string | undefined} url\n    * @param {ProvingKey | undefined} transfer_proving_key\n    * @param {VerifyingKey | undefined} transfer_verifying_key\n    * @param {ProvingKey | undefined} fee_proving_key\n    * @param {VerifyingKey | undefined} fee_verifying_key\n    * @param {OfflineQuery | undefined} offline_query\n    * @returns {Promise<Transaction>}\n    */\n    static buildTransferTransaction(private_key, amount_credits, recipient, transfer_type, amount_record, fee_credits, fee_record, url, transfer_proving_key, transfer_verifying_key, fee_proving_key, fee_verifying_key, offline_query) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(transfer_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        let ptr2 = 0;\n        if (!isLikeNone(amount_record)) {\n            _assertClass(amount_record, RecordPlaintext);\n            ptr2 = amount_record.__destroy_into_raw();\n        }\n        let ptr3 = 0;\n        if (!isLikeNone(fee_record)) {\n            _assertClass(fee_record, RecordPlaintext);\n            ptr3 = fee_record.__destroy_into_raw();\n        }\n        var ptr4 = isLikeNone(url) ? 0 : passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len4 = WASM_VECTOR_LEN;\n        let ptr5 = 0;\n        if (!isLikeNone(transfer_proving_key)) {\n            _assertClass(transfer_proving_key, ProvingKey);\n            ptr5 = transfer_proving_key.__destroy_into_raw();\n        }\n        let ptr6 = 0;\n        if (!isLikeNone(transfer_verifying_key)) {\n            _assertClass(transfer_verifying_key, VerifyingKey);\n            ptr6 = transfer_verifying_key.__destroy_into_raw();\n        }\n        let ptr7 = 0;\n        if (!isLikeNone(fee_proving_key)) {\n            _assertClass(fee_proving_key, ProvingKey);\n            ptr7 = fee_proving_key.__destroy_into_raw();\n        }\n        let ptr8 = 0;\n        if (!isLikeNone(fee_verifying_key)) {\n            _assertClass(fee_verifying_key, VerifyingKey);\n            ptr8 = fee_verifying_key.__destroy_into_raw();\n        }\n        let ptr9 = 0;\n        if (!isLikeNone(offline_query)) {\n            _assertClass(offline_query, OfflineQuery);\n            ptr9 = offline_query.__destroy_into_raw();\n        }\n        const ret = wasm.programmanager_buildTransferTransaction(private_key.__wbg_ptr, amount_credits, ptr0, len0, ptr1, len1, ptr2, fee_credits, ptr3, ptr4, len4, ptr5, ptr6, ptr7, ptr8, ptr9);\n        return takeObject(ret);\n    }\n    /**\n    * Synthesize proving and verifying keys for a program\n    *\n    * @param program {string} The program source code of the program to synthesize keys for\n    * @param function_id {string} The function to synthesize keys for\n    * @param inputs {Array} The inputs to the function\n    * @param imports {Object | undefined} The imports for the program\n    * @param {PrivateKey} private_key\n    * @param {string} program\n    * @param {string} function_id\n    * @param {Array<any>} inputs\n    * @param {object | undefined} imports\n    * @returns {Promise<KeyPair>}\n    */\n    static synthesizeKeyPair(private_key, program, function_id, inputs, imports) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(function_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.programmanager_synthesizeKeyPair(private_key.__wbg_ptr, ptr0, len0, ptr1, len1, addHeapObject(inputs), isLikeNone(imports) ? 0 : addHeapObject(imports));\n        return takeObject(ret);\n    }\n}\n/**\n* Proving key for a function within an Aleo program\n*/\nclass ProvingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ProvingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_provingkey_free(ptr);\n    }\n    /**\n    * Construct a new proving key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte array representation of a proving key\n    * @returns {ProvingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {ProvingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.provingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProvingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the byte representation of a proving key\n    *\n    * @returns {Uint8Array | Error} Byte array representation of a proving key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.provingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a copy of the proving key\n    *\n    * @returns {ProvingKey} A copy of the proving key\n    * @returns {ProvingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return ProvingKey.__wrap(ret);\n    }\n}\n/**\n* Encrypted Aleo record\n*/\nclass RecordCiphertext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordCiphertext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordciphertext_free(ptr);\n    }\n    /**\n    * Create a record ciphertext from a string\n    *\n    * @param {string} record String representation of a record ciphertext\n    * @returns {RecordCiphertext | Error} Record ciphertext\n    * @param {string} record\n    * @returns {RecordCiphertext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordciphertext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordCiphertext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the string reprensentation of the record ciphertext\n    *\n    * @returns {string} String representation of the record ciphertext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordciphertext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Decrypt the record ciphertext into plaintext using the view key. The record will only\n    * decrypt if the record was encrypted by the account corresponding to the view key\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {RecordPlaintext | Error} Record plaintext object\n    * @param {ViewKey} view_key\n    * @returns {RecordPlaintext}\n    */\n    decrypt(view_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(view_key, ViewKey);\n            wasm.recordciphertext_decrypt(retptr, this.__wbg_ptr, view_key.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Determines if the account corresponding to the view key is the owner of the record\n    *\n    * @param {ViewKey} view_key View key used to decrypt the ciphertext\n    * @returns {boolean}\n    * @param {ViewKey} view_key\n    * @returns {boolean}\n    */\n    isOwner(view_key) {\n        _assertClass(view_key, ViewKey);\n        const ret = wasm.recordciphertext_isOwner(this.__wbg_ptr, view_key.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n/**\n* Plaintext representation of an Aleo record\n*/\nclass RecordPlaintext {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RecordPlaintext.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_recordplaintext_free(ptr);\n    }\n    /**\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {Field}\n    */\n    commitment(program_id, record_name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_commitment(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Field.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a record plaintext from a string.\n    *\n    * @param {string} record String representation of a plaintext representation of an Aleo record\n    * @returns {RecordPlaintext | Error} Record plaintext\n    * @param {string} record\n    * @returns {RecordPlaintext}\n    */\n    static fromString(record) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(record, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RecordPlaintext.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the record plaintext string\n    *\n    * @returns {string} String representation of the record plaintext\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Returns the amount of microcredits in the record\n    *\n    * @returns {u64} Amount of microcredits in the record\n    * @returns {bigint}\n    */\n    microcredits() {\n        const ret = wasm.recordplaintext_microcredits(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n    * Returns the nonce of the record. This can be used to uniquely identify a record.\n    *\n    * @returns {string} Nonce of the record\n    * @returns {string}\n    */\n    nonce() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.recordplaintext_nonce(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Attempt to get the serial number of a record to determine whether or not is has been spent\n    *\n    * @param {PrivateKey} private_key Private key of the account that owns the record\n    * @param {string} program_id Program ID of the program that the record is associated with\n    * @param {string} record_name Name of the record\n    * @returns {string | Error} Serial number of the record\n    * @param {PrivateKey} private_key\n    * @param {string} program_id\n    * @param {string} record_name\n    * @returns {string}\n    */\n    serialNumberString(private_key, program_id, record_name) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(private_key, PrivateKey);\n            const ptr0 = passStringToWasm0(program_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(record_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.recordplaintext_serialNumberString(retptr, this.__wbg_ptr, private_key.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr3 = r0;\n            var len3 = r1;\n            if (r3) {\n                ptr3 = 0; len3 = 0;\n                throw takeObject(r2);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n}\n/**\n* Cryptographic signature of a message signed by an Aleo account\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Sign a message with a private key\n    *\n    * @param {PrivateKey} private_key The private key to sign the message with\n    * @param {Uint8Array} message Byte representation of the message to sign\n    * @returns {Signature} Signature of the message\n    * @param {PrivateKey} private_key\n    * @param {Uint8Array} message\n    * @returns {Signature}\n    */\n    static sign(private_key, message) {\n        _assertClass(private_key, PrivateKey);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.privatekey_sign(private_key.__wbg_ptr, ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Verify a signature of a message with an address\n    *\n    * @param {Address} address The address to verify the signature with\n    * @param {Uint8Array} message Byte representation of the message to verify\n    * @returns {boolean} True if the signature is valid, false otherwise\n    * @param {Address} address\n    * @param {Uint8Array} message\n    * @returns {boolean}\n    */\n    verify(address, message) {\n        _assertClass(address, Address);\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_verify(this.__wbg_ptr, address.__wbg_ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Get a signature from a string representation of a signature\n    *\n    * @param {string} signature String representation of a signature\n    * @returns {Signature} Signature\n    * @param {string} signature\n    * @returns {Signature}\n    */\n    static from_string(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_from_string(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a signature\n    *\n    * @returns {string} String representation of a signature\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Webassembly Representation of an Aleo transaction\n*\n* This object is created when generating an on-chain function deployment or execution and is the\n* object that should be submitted to the Aleo Network in order to deploy or execute a function.\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Transaction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * Create a transaction from a string\n    *\n    * @param {string} transaction String representation of a transaction\n    * @returns {Transaction | Error}\n    * @param {string} transaction\n    * @returns {Transaction}\n    */\n    static fromString(transaction) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(transaction, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transaction_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the transaction as a string. If you want to submit this transaction to the Aleo Network\n    * this function will create the string that should be submitted in the `POST` data.\n    *\n    * @returns {string} String representation of the transaction\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the id of the transaction. This is the merkle root of the transaction's inclusion proof.\n    *\n    * This value can be used to query the status of the transaction on the Aleo Network to see\n    * if it was successful. If successful, the transaction will be included in a block and this\n    * value can be used to lookup the transaction data on-chain.\n    *\n    * @returns {string} Transaction id\n    * @returns {string}\n    */\n    transactionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionId(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the type of the transaction (will return \"deploy\" or \"execute\")\n    *\n    * @returns {string} Transaction type\n    * @returns {string}\n    */\n    transactionType() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_transactionType(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n/**\n* Verifying key for a function within an Aleo program\n*/\nclass VerifyingKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerifyingKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifyingkey_free(ptr);\n    }\n    /**\n    * Construct a new verifying key from a byte array\n    *\n    * @param {Uint8Array} bytes Byte representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {Uint8Array} bytes\n    * @returns {VerifyingKey}\n    */\n    static fromBytes(bytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromBytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a byte array from a verifying key\n    *\n    * @returns {Uint8Array | Error} Byte representation of a verifying key\n    * @returns {Uint8Array}\n    */\n    toBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toBytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Create a verifying key from string\n    *\n    * @param {String} string String representation of a verifying key\n    * @returns {VerifyingKey | Error}\n    * @param {string} string\n    * @returns {VerifyingKey}\n    */\n    static fromString(string) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.verifyingkey_fromString(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifyingKey.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get a string representation of the verifying key\n    *\n    * @returns {String} String representation of the verifying key\n    * @returns {string}\n    */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifyingkey_toString(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Create a copy of the verifying key\n    *\n    * @returns {VerifyingKey} A copy of the verifying key\n    * @returns {VerifyingKey}\n    */\n    copy() {\n        const ret = wasm.provingkey_copy(this.__wbg_ptr);\n        return VerifyingKey.__wrap(ret);\n    }\n}\n/**\n*/\nclass ViewKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ViewKey.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_viewkey_free(ptr);\n    }\n    /**\n    * Create a new view key from a private key\n    *\n    * @param {PrivateKey} private_key Private key\n    * @returns {ViewKey} View key\n    * @param {PrivateKey} private_key\n    * @returns {ViewKey}\n    */\n    static from_private_key(private_key) {\n        _assertClass(private_key, PrivateKey);\n        const ret = wasm.privatekey_to_view_key(private_key.__wbg_ptr);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Create a new view key from a string representation of a view key\n    *\n    * @param {string} view_key String representation of a view key\n    * @returns {ViewKey} View key\n    * @param {string} view_key\n    * @returns {ViewKey}\n    */\n    static from_string(view_key) {\n        const ptr0 = passStringToWasm0(view_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.viewkey_from_string(ptr0, len0);\n        return ViewKey.__wrap(ret);\n    }\n    /**\n    * Get a string representation of a view key\n    *\n    * @returns {string} String representation of a view key\n    * @returns {string}\n    */\n    to_string() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.viewkey_to_string(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * Get the address corresponding to a view key\n    *\n    * @returns {Address} Address\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = wasm.address_from_view_key(this.__wbg_ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * Decrypt a record ciphertext with a view key\n    *\n    * @param {string} ciphertext String representation of a record ciphertext\n    * @returns {string} String representation of a record plaintext\n    * @param {string} ciphertext\n    * @returns {string}\n    */\n    decrypt(ciphertext) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.viewkey_decrypt(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_daafff584c71593b = function() { return handleError(function () {\n        const ret = new XMLHttpRequest();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_overrideMimeType_1a661d17da5f8baf = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).overrideMimeType(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_open_56fa1eb95989f6a5 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5) {\n        getObject(arg0).open(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), arg5 !== 0);\n    }, arguments) };\n    imports.wbg.__wbg_send_9f5007eae908c72e = function() { return handleError(function (arg0) {\n        getObject(arg0).send();\n    }, arguments) };\n    imports.wbg.__wbg_response_f2acf2ecbe021710 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).response;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_b51585de1b234aff = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_092e06b0f9d71865 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_new_1eead62f64ca15ce = function() { return handleError(function () {\n        const ret = new Headers();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_append_fda9e3432e3e88da = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_new_55c9955722952374 = function() { return handleError(function () {\n        const ret = new AbortController();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_signal_4bd18fb489af2d4c = function(arg0) {\n        const ret = getObject(arg0).signal;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_fc4327dbfcdf5ced = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_ac85a3142a84caa2 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_8503de97f69da463 = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_headers_b70de86b8e989bc0 = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_iterator_97f0c81209c6c35a = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_next_526fc47e980da008 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1695675138684bd5 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_abort_654b796176d117aa = function(arg0) {\n        getObject(arg0).abort();\n    };\n    imports.wbg.__wbg_stringify_e25465938f3f611f = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_keypair_new = function(arg0) {\n        const ret = KeyPair.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_log_10faa3de4533ea5d = function(arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_3ec098a360da1909 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_transaction_new = function(arg0) {\n        const ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_executionresponse_new = function(arg0) {\n        const ret = ExecutionResponse.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = __wbg_init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_spawnWorker_5ccde1f7f9b580dd = function(arg0, arg1, arg2, arg3) {\n        const ret = spawnWorker(getObject(arg0), getObject(arg1), getObject(arg2), arg3);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_arrayBuffer_288fb3538806e85c = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).arrayBuffer();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_new_43f1b47c28813cbd = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_205(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_new_898a68150f225f2e = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_ca1c26067ef907ac = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {\n        const ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {\n        const ret = getObject(arg1).stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_37fa2ca9e4e07fab = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_dc1e9a60c158336d = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).randomFillSync(takeObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c48a774b022d20ac = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_298734cf255a885d = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_e2e78e134e3e5d01 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_1cd7a5d853dbea79 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_msCrypto_bcb970640f50a1e8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_8f08ceecec0f4fee = function() { return handleError(function () {\n        const ret = module.require;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_has_c5fcd020291e56b8 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.has(getObject(arg0), getObject(arg1));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_fetch_8eaf01857a5bb21f = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_fetch_b5d6bebed1e6c2d2 = function(arg0) {\n        const ret = fetch(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function(arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbg_then_b2267541e2a73865 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_f7e06ee3c11698eb = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_53698b95aaf7fcf8 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_60fb5e2e86467e31 = function() {\n        const ret = Atomics.waitAsync;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_a0af68041688e8fd = function(arg0) {\n        const ret = new Int32Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_waitAsync_73fd6eb3bace0a8d = function(arg0, arg1, arg2) {\n        const ret = Atomics.waitAsync(getObject(arg0), arg1, arg2);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_async_e1a2a669aacf35ff = function(arg0) {\n        const ret = getObject(arg0).async;\n        return ret;\n    };\n    imports.wbg.__wbg_value_555e4f564193db05 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_link_22046963fe0b707a = function(arg0) {\n        const ret = \"data:application/javascript,\" + encodeURIComponent(`onmessage = function (ev) {\n            let [ia, index, value] = ev.data;\n            ia = new Int32Array(ia.buffer);\n            let result = Atomics.wait(ia, index, value);\n            postMessage(result);\n        };\n        `);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    };\n    imports.wbg.__wbg_new_8e7322f46d5d019c = function() { return handleError(function (arg0, arg1) {\n        const ret = new Worker(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_f0bd0280573b7084 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_of_3f69007bb4eeae65 = function(arg0, arg1, arg2) {\n        const ret = Array.of(getObject(arg0), getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_postMessage_8c609e2bde333d9c = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).postMessage(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_data_ab99ae4a2e1e8bc9 = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_cad5cd6038c7ff5d = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_status_114ef6fe27fb8b00 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_responseText_da275667251fd153 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg1).responseText;\n        var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len1;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper5591 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 543, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper5614 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 543, __wbg_adapter_34);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:168,maximum:65536,shared:true});\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input, maybe_memory) {\n    if (wasm !== undefined) return wasm;\n\n\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports, maybe_memory);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nvar exports = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Address: Address,\n    Execution: Execution,\n    ExecutionResponse: ExecutionResponse,\n    Field: Field,\n    KeyPair: KeyPair,\n    OfflineQuery: OfflineQuery,\n    PrivateKey: PrivateKey,\n    PrivateKeyCiphertext: PrivateKeyCiphertext,\n    Program: Program,\n    ProgramManager: ProgramManager,\n    ProvingKey: ProvingKey,\n    RecordCiphertext: RecordCiphertext,\n    RecordPlaintext: RecordPlaintext,\n    Signature: Signature,\n    Transaction: Transaction,\n    VerifyingKey: VerifyingKey,\n    ViewKey: ViewKey,\n    default: __wbg_init,\n    initSync: initSync,\n    initThreadPool: initThreadPool,\n    runRayonThread: runRayonThread,\n    verifyFunctionExecution: verifyFunctionExecution\n});\n\nconst wasm_path = \"assets/aleo_wasm.wasm\";\n\n            \n            var Cargo = async (opt = {}) => {\n                let {importHook, serverPath, initializeHook} = opt;\n\n                let final_path = wasm_path;\n\n                if (serverPath != null) {\n                    final_path = serverPath + /[^\\/\\\\]*$/.exec(final_path)[0];\n                }\n\n                if (importHook != null) {\n                    final_path = importHook(final_path);\n                }\n\n                if (initializeHook != null) {\n                    await initializeHook(__wbg_init, final_path);\n\n                } else {\n                    await __wbg_init(final_path);\n                }\n\n                return exports;\n            };\n\nexport { Cargo as default };\n//# sourceMappingURL=wasm.js.map\n","import wasm from \"../dist/wasm.js\";\n\nconst {\n    initThreadPool: wasmInitThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    Private,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n} = await wasm({\n    importHook: () => {\n        return new URL(\"assets/aleo_wasm.wasm\", import.meta.url);\n    },\n});\n\nasync function initThreadPool(threads) {\n    if (threads == null) {\n        threads = navigator.hardwareConcurrency;\n    }\n\n    console.info(`Spawning ${threads} threads`);\n\n    await wasmInitThreadPool(new URL(\"worker.js\", import.meta.url), threads);\n}\n\nexport {\n    initThreadPool,\n    Address,\n    Execution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    ProgramManager,\n    Signature,\n    Transaction,\n    ViewKey,\n    VerifyingKey,\n    verifyFunctionExecution,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t631: 1,\n\t339: 1\n};\n\n// no chunk install function needed\n// no chunk loading\n\n// no HMR\n\n// no HMR manifest","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(450);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","async","get","url","response","fetch","ok","Error","status","post","options","method","AleoNetworkClient","host","account","constructor","this","setAccount","getAccount","setHost","fetchData","json","error","findUnspentRecords","startHeight","endHeight","privateKey","amounts","maxMicrocredits","nonces","records","Array","start","end","resolvedPrivateKey","latestHeight","failures","totalRecordValue","BigInt","_privateKey","PrivateKey","from_string","viewKey","to_view_key","blockHeight","getLatestHeight","blocks","getBlockRange","i","length","transactions","j","confirmedTransaction","type","transaction","execution","transitions","k","transition","program","outputs","l","output","record","RecordCiphertext","fromString","value","isOwner","recordPlaintext","decrypt","nonce","includes","serialNumber","serialNumberString","getTransitionId","push","microcredits","amounts_found","console","warn","toString","getBlock","height","getDeploymentTransactionIDForProgram","Program","replace","getDeploymentTransactionForProgram","transaction_id","getTransaction","getLatestBlock","getLatestCommittee","getProgram","programId","getProgramObject","inputProgram","getProgramImports","imports","importList","getImports","import_id","hasOwnProperty","programSource","nestedImports","key","logAndThrow","getProgramImportNames","getProgramMappingNames","getProgramMappingValue","mappingName","getStateRoot","id","getTransactions","getTransactionsInMempool","inputOrOutputID","submitTransaction","transaction_string","Transaction","body","headers","message","AleoKeyProviderParams","proverUri","verifierUri","cacheKey","params","AleoKeyProvider","cache","cacheOption","keyUris","fetchBytes","data","arrayBuffer","Uint8Array","KEY_STORE","Map","useCache","clearCache","clear","cacheKeys","keyId","keys","provingKey","verifyingKey","set","toBytes","containsKeys","has","deleteKeys","delete","getKeys","debug","provingKeyBytes","verifyingKeyBytes","ProvingKey","fromBytes","VerifyingKey","functionKeys","proverUrl","verifierUrl","fetchKeys","getVerifyingKey","transferKeys","visibility","PRIVATE_TRANSFER","CREDITS_PROGRAM_KEYS","transfer_private","prover","verifier","PRIVATE_TO_PUBLIC_TRANSFER","transfer_private_to_public","PUBLIC_TRANSFER","transfer_public","PUBLIC_TO_PRIVATE_TRANSFER","transfer_public_to_private","joinKeys","join","splitKeys","split","feePrivateKeys","fee_private","feePublicKeys","fee_public","bond_public","claim_unbond_public","inclusion","unbond_public","ProgramManager","keyProvider","networkClient","recordProvider","setKeyProvider","setRecordProvider","deploy","fee","privateFee","recordSearchParams","feeRecord","programObject","e","log","feeKeys","deploymentPrivateKey","getCreditsRecord","undefined","feeProvingKey","feeVerifyingKey","tx","ProgramManager$1","buildDeploymentTransaction","buildExecutionTransaction","programName","functionName","inputs","keySearchParams","offlineQuery","executionPrivateKey","execute","run","function_name","proveExecution","executeFunctionOffline","recordOne","recordTwo","joinProvingKey","joinVerifyingKey","RecordPlaintext","buildJoinTransaction","splitAmount","amountRecord","splitProvingKey","splitVerifyingKey","buildSplitTransaction","synthesizeKeys","function_id","keyPair","synthesizeKeyPair","buildTransferTransaction","amount","recipient","transferType","validateTransferType","transferProvingKey","transferVerifyingKey","requiresAmountRecord","buildTransferPublicTransaction","transfer","buildBondPublicTransaction","address","Math","trunc","offlineParams","executionParams","bondPublic","buildUnbondPublicTransaction","unbondPublic","buildClaimUnbondPublicTransaction","claimUnbondPublic","setValidatorState","validator_state","set_validator_state","unbondDelegatorAsValidator","unbond_delegator_as_validator","verifyExecution","executionResponse","getExecution","getFunctionId","verifyFunctionExecution","createProgramFromSource","creditsProgram","getCreditsProgram","verifyProgram","findCreditsRecord","PRIVATE_TRANSFER_TYPES","VALID_TRANSFER_TYPES","Set","initThreadPool","defaultHost","programManager","lastLocalProgram","executeOffline","localProgram","aleoFunction","startTime","performance","now","program_id","hasFunction","keyParams","getOutputs","executionString","getPrivateKey","to_string","workerAPI","expose","spawnWorker","module","memory","Promise","resolve","worker","Worker","addEventListener","event","unref","capture","once","postMessage","wasm","heap","fill","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","slice","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encode","encodeString","arg","view","buf","read","written","passStringToWasm0","malloc","realloc","subarray","mem","offset","code","charCodeAt","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","debugString","val","description","name","isArray","builtInMatches","exec","call","className","JSON","stringify","_","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_3","original","__wbg_adapter_34","arg2","wasm_bindgen__convert__closures__invoke1_mut__h53d50e21bb2d5c71","_assertClass","instance","klass","passArray8ToWasm0","verifyFunctionExecution$1","verifying_key","retptr","__wbindgen_add_to_stack_pointer","Execution$1","VerifyingKey$1","Program$1","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbg_ptr","r0","r1","cachedBigInt64Memory0","getBigInt64Memory0","BigInt64Array","getArrayU8FromWasm0","runRayonThread","receiver","initThreadPool$1","num_threads","handleError","apply","__wbindgen_exn_store","__wbg_adapter_205","arg3","wasm_bindgen__convert__closures__invoke2_mut__he97f6a3b9df30e2b","Address","__wrap","Object","create","prototype","__destroy_into_raw","free","__wbg_address_free","from_private_key","private_key","PrivateKey$1","address_from_private_key","from_view_key","view_key","ViewKey$1","address_from_view_key","address_from_string","deferred1_0","deferred1_1","address_to_string","__wbindgen_free","verify","signature","Signature$1","address_verify","Execution","__wbg_execution_free","execution_toString","execution_fromString","ExecutionResponse","__wbg_executionresponse_free","executionresponse_getOutputs","executionresponse_getExecution","executionresponse_getKeys","KeyPair","getProvingKey","executionresponse_getProvingKey","ProvingKey$1","executionresponse_getVerifyingKey","executionresponse_getFunctionId","executionresponse_getProgram","Field","__wbg_field_free","field_toString","field","field_fromString","__wbg_keypair_free","proving_key","ptr1","keypair_new","keypair_provingKey","keypair_verifyingKey","OfflineQuery","__wbg_offlinequery_free","state_root","offlinequery_new","addStatePath","commitment","state_path","len1","offlinequery_addStatePath","offlinequery_toString","s","offlinequery_fromString","__wbg_privatekey_free","privatekey_new","from_seed_unchecked","seed","privatekey_from_seed_unchecked","privatekey_from_string","privatekey_to_string","privatekey_to_view_key","to_address","Address$1","sign","privatekey_sign","newEncrypted","secret","privatekey_newEncrypted","PrivateKeyCiphertext$1","toCiphertext","privatekey_toCiphertext","fromPrivateKeyCiphertext","ciphertext","privatekey_fromPrivateKeyCiphertext","PrivateKeyCiphertext","__wbg_privatekeyciphertext_free","encryptPrivateKey","decryptToPrivateKey","privatekeyciphertext_decryptToPrivateKey","privatekeyciphertext_toString","privatekeyciphertext_fromString","__wbg_program_free","program_fromString","program_toString","program_hasFunction","getFunctions","program_getFunctions","getFunctionInputs","program_getFunctionInputs","getMappings","program_getMappings","getRecordMembers","record_name","program_getRecordMembers","getStructMembers","struct_name","program_getStructMembers","program_getCreditsProgram","isEqual","other","program_isEqual","program_getImports","__wbg_programmanager_free","fee_credits","fee_record","fee_proving_key","fee_verifying_key","offline_query","RecordPlaintext$1","ptr2","len2","ptr3","ptr4","ptr5","OfflineQuery$1","programmanager_buildDeploymentTransaction","estimateDeploymentFee","programmanager_estimateDeploymentFee","estimateProgramNameCost","programmanager_estimateProgramNameCost","r2","asUintN","_function","prove_execution","len4","programmanager_executeFunctionOffline","len3","ptr6","ptr7","ptr8","programmanager_buildExecutionTransaction","estimateExecutionFee","programmanager_estimateExecutionFee","estimateFinalizeFee","programmanager_estimateFinalizeFee","record_1","record_2","join_proving_key","join_verifying_key","programmanager_buildJoinTransaction","split_amount","amount_record","split_proving_key","split_verifying_key","programmanager_buildSplitTransaction","amount_credits","transfer_type","transfer_proving_key","transfer_verifying_key","ptr9","programmanager_buildTransferTransaction","programmanager_synthesizeKeyPair","__wbg_provingkey_free","bytes","provingkey_fromBytes","provingkey_toBytes","v1","copy","provingkey_copy","__wbg_recordciphertext_free","recordciphertext_fromString","recordciphertext_toString","recordciphertext_decrypt","recordciphertext_isOwner","__wbg_recordplaintext_free","recordplaintext_commitment","Field$1","recordplaintext_fromString","recordplaintext_toString","recordplaintext_microcredits","recordplaintext_nonce","deferred4_0","deferred4_1","recordplaintext_serialNumberString","r3","Signature","__wbg_signature_free","signature_verify","signature_from_string","signature_to_string","__wbg_transaction_free","transaction_fromString","transaction_toString","transactionId","transaction_transactionId","transactionType","transaction_transactionType","__wbg_verifyingkey_free","verifyingkey_fromBytes","verifyingkey_toBytes","string","verifyingkey_fromString","verifyingkey_toString","ViewKey","__wbg_viewkey_free","viewkey_from_string","viewkey_to_string","deferred3_0","deferred3_1","viewkey_decrypt","__wbg_load","Response","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_object_drop_ref","__wbg_new_daafff584c71593b","XMLHttpRequest","arguments","__wbg_overrideMimeType_1a661d17da5f8baf","overrideMimeType","__wbg_open_56fa1eb95989f6a5","arg4","arg5","open","__wbg_send_9f5007eae908c72e","send","__wbg_response_f2acf2ecbe021710","__wbg_new_b51585de1b234aff","__wbindgen_string_new","__wbg_set_092e06b0f9d71865","Reflect","__wbg_new_1eead62f64ca15ce","Headers","__wbindgen_object_clone_ref","__wbg_append_fda9e3432e3e88da","append","__wbg_new_55c9955722952374","AbortController","__wbg_signal_4bd18fb489af2d4c","signal","__wbg_instanceof_Response_fc4327dbfcdf5ced","result","__wbg_status_ac85a3142a84caa2","__wbg_url_8503de97f69da463","__wbg_headers_b70de86b8e989bc0","__wbg_iterator_97f0c81209c6c35a","Symbol","iterator","__wbg_get_97b561fb56f034b5","__wbindgen_is_function","__wbg_call_cb65541d95d71282","__wbindgen_is_object","__wbg_next_526fc47e980da008","next","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","__wbg_abort_654b796176d117aa","abort","__wbg_stringify_e25465938f3f611f","__wbindgen_string_get","__wbg_keypair_new","__wbg_call_01734de55d61e11d","__wbg_log_10faa3de4533ea5d","__wbindgen_bigint_from_u64","__wbg_newwithlength_3ec098a360da1909","__wbg_set_502d29070ea18557","__wbg_transaction_new","Transaction$1","__wbg_executionresponse_new","ExecutionResponse$1","__wbindgen_module","__wbg_init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_spawnWorker_5ccde1f7f9b580dd","__wbindgen_cb_drop","__wbg_arrayBuffer_288fb3538806e85c","__wbg_new_8125e318e6245eed","__wbg_length_72e2208bbc0efc61","__wbg_new_43f1b47c28813cbd","state0","cb0","__wbg_new_898a68150f225f2e","__wbg_push_ca1c26067ef907ac","__wbindgen_number_new","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","__wbg_subarray_13db269f57aa838d","__wbg_getRandomValues_37fa2ca9e4e07fab","getRandomValues","__wbg_buffer_085ec1f694018c4f","__wbg_set_5cf90238115182c3","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_randomFillSync_dc1e9a60c158336d","randomFillSync","__wbg_crypto_c48a774b022d20ac","crypto","__wbg_process_298734cf255a885d","process","__wbg_versions_e2e78e134e3e5d01","versions","__wbg_node_1cd7a5d853dbea79","node","__wbindgen_is_string","__wbg_msCrypto_bcb970640f50a1e8","msCrypto","__wbg_newwithlength_e5d69174d6984cd7","__wbg_require_8f08ceecec0f4fee","require","__wbg_length_fff51ee6522a1a18","__wbg_get_44be0491f933a435","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","global","__wbindgen_is_undefined","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_has_c5fcd020291e56b8","__wbg_fetch_8eaf01857a5bb21f","__wbg_fetch_b5d6bebed1e6c2d2","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbg_then_b2267541e2a73865","then","__wbg_then_f7e06ee3c11698eb","__wbg_resolve_53698b95aaf7fcf8","__wbg_waitAsync_60fb5e2e86467e31","Atomics","waitAsync","__wbg_new_a0af68041688e8fd","__wbg_waitAsync_73fd6eb3bace0a8d","__wbg_async_e1a2a669aacf35ff","__wbg_value_555e4f564193db05","__wbindgen_link_22046963fe0b707a","encodeURIComponent","__wbg_new_8e7322f46d5d019c","__wbg_setonmessage_f0bd0280573b7084","onmessage","__wbg_of_3f69007bb4eeae65","of","__wbg_postMessage_8c609e2bde333d9c","__wbg_data_ab99ae4a2e1e8bc9","__wbg_newwithstrandinit_cad5cd6038c7ff5d","Request","__wbg_status_114ef6fe27fb8b00","__wbg_responseText_da275667251fd153","responseText","__wbindgen_closure_wrapper5591","__wbindgen_closure_wrapper5614","__wbg_init_memory","maybe_memory","Memory","initial","maximum","shared","__wbg_finalize_init","exports","__wbindgen_start","initSync","Module","input","URL","freeze","__proto__","RecordCiphertext$1","default","wasm_path","wasmInitThreadPool","Private","opt","importHook","serverPath","initializeHook","final_path","Cargo","threads","navigator","hardwareConcurrency","info","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","transferHandlers","canHandle","serialize","port1","port2","MessageChannel","deserialize","port","createProxy","target","serialized","isError","assign","ep","allowedOrigins","callback","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","map","fromWireValue","returnValue","parent","reduce","prop","rawValue","proxy","transfers","transferCache","catch","wireValue","transferables","toWireValue","removeEventListener","closeEndPoint","TypeError","endpoint","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","r","p","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","concat","handler","serializedValue","msg","floor","random","Number","MAX_SAFE_INTEGER","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","queue","d","forEach","fn","hasAwait","currentDeps","outerResolve","reject","depQueues","promise","rej","deps","dep","wrapDeps","getResult","fnQueue","q","add","err","definition","o","defineProperty","enumerable","u","chunkId","g","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName"],"sourceRoot":""}